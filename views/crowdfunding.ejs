<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Symbol</span>
            </div>
            <input type="text" class="form-control" placeholder="token symbol" aria-label="tokenSymbol" id="tokenSymbolCFC" aria-describedby="tokenSymbolCFC">
        </div>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Contract</span>
            </div>
            <input type="text" class="form-control" placeholder="token contract addr" aria-label="tokenCtrtAddr" id="tokenCtrtAddrCFC" aria-describedby="tokenCtrtAddrCFC"
            value=''>
        </div>
        <!-- 0xD24272DBF4642a2550e852BF2f802E446c919Ba0 -->

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Email</span>
            </div>
            <input type="email" class="form-control" placeholder="email" aria-label="email" id="email" aria-describedby="email">
        </div>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Assetbook</span>
            </div>
            <input type="text" class="form-control" placeholder="assetbook contract addr" aria-label="assetbookAddr" id="assetbookAddr" aria-describedby="assetbookAddr">
        </div>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Investor Index</span>
            </div>
            <input type="text" class="form-control" placeholder="investor index" aria-label="investorIndex" id="investorIndex" aria-describedby="investorIndex">
        </div>


        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="getCrowdfundingDetails" class="btn btn-primary">Get Crowdfunding Details</button>

          <button type="button" id="getInvestors" class="btn btn-primary">getInvestors</button>

          <button type="button" id="emailToQty" class="btn btn-primary">emailToQty</button>

          <button type="button" id="ownerToQty" class="btn btn-primary">ownerToQty</button>

          <button type="button" id="idxToOwner" class="btn btn-primary">Investor Index To Owner</button>

        </div>

      </div>

      <div class="col">
        <h5>Result</h5>
        TimeOfDeployment: <span id="TimeOfDeployment"></span><br>
        maxTokenQtyForEachInvestmentFund: <span id="maxTokenQtyForEachInvestmentFund"></span><br>
        tokenSymbol: <span id="tokenSymbol"></span><br>
        pricingCurrency: <span id="pricingCurrency"></span><br>
        initialAssetPricing: <span id="initialAssetPricing"></span><br>
        maxTotalSupply: <span id="maxTotalSupply"></span><br>
        quantityGoal: <span id="quantityGoal"></span><br>
        quantitySold: <span id="quantitySold"></span><br>
        remainingQty: <span id="remainingQty"></span><br>
        CFSD: <span id="CFSD"></span><br>
        CFED: <span id="CFED"></span><br>

        <br>
        fundingCindex: <span id="fundingCindex"></span><br>
        fundingState: <span id="fundingState"></span><br>
        stateDescription: <span id="stateDescription"></span><br>

        <br>
        assetbookArray: <span id="assetbookArray"></span><br>
        investedTokenQtyArray: <span id="investedTokenQtyArray"></span><br>

        <br>
        quantityOwned: <span id="quantityOwned"></span><br>
        addrOwner: <span id="addrOwner"></span><br>

      </div>
    </div>
  </div>
  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/crowdfunding

    // $(document).ready(function() {
    //   $("#alertInputs").hide();
    // });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'crowdfunding';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);

    const getHeliumCtrtAddr = async() => {
      console.log(`inside getHeliumCtrtAddr()...`);
      const url = BcApiBase+`heliumContract`;
      const response = await fetch(url);
      const text = await response.text();
      return text;
    }
    
    const showAlert = (messageTxt) => {
      document.getElementById("alertInputs").innerText = messageTxt;
      //jQuery("#alertInputs").fadeOut("slow");
      $('.collapse').collapse();
      $("#alertInputs").fadeTo(10000, 500).slideUp(500, function() {
        $("#alertInputs").slideUp(500);
      });
    }


    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let tokenSymbol_input, ctrtAddr_input, email_input, assetbookAddr_input, investorIndex_input, mesg, isGood, resultMesg, tokenSymbol, ctrtAddr, email, assetbookAddr, investorIndex;

      tokenSymbol_input = document.getElementById("tokenSymbolCFC").value;
      ctrtAddr_input = document.getElementById("tokenCtrtAddrCFC").value;
      email_input = document.getElementById("email").value;
      assetbookAddr_input = document.getElementById("assetbookAddr").value;
      investorIndex_input = document.getElementById("investorIndex").value;

      const isTokenSymbolEmpty = isEmpty(tokenSymbol_input);
      const isTokenCtrtAddrCFC_empty = isEmpty(ctrtAddr_input);

      if(!isTokenSymbolEmpty){
        if(tokenSymbol_input.length === 8){
          const url = BcApiBase+`getCtrtAddrFromTokenSymbol`;
          console.log('about to find contract address ... url:',url);
          const data = {tokenSymbol: tokenSymbol_input, ctrtType: 'crowdfunding'};
          const options = {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data), // data can be `string` or {object}!
            headers:{'Content-Type': 'application/json'}
          };
          const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
          const json = await response.json();
          console.log('json', json);
          ({ isGood, ctrtAddr, resultMesg} = json);
          console.log(`isGood: ${isGood}, ctrtAddr: ${ctrtAddr}, \nresultMesg: ${resultMesg}`);

        } else {
          mesg = 'tokenSymbol should have length of 8';
        }

      } else if(!isTokenCtrtAddrCFC_empty){
        if(ctrtAddr_input.length !== 42){
          mesg = 'Crowdfunding contract address should have length of 42';
        } else if(ctrtAddr_input.substring(0, 2) !== '0x'){
          mesg = 'Crowdfunding contract address should start with 0x';
        } else {
          isGood = true;
          ctrtAddr = ctrtAddr_input;
        // if(!tokenSymbol_input){
        //   const url = BcApiBase+`getTokenSymbolFromCtrtAddr`;
        //   console.log('tokenSymbol_input is empty... url:',url);
        //   const data = {ctrtAddr: ctrtAddr_input, ctrtType: contractType};
        //   const options = {
        //     method: 'POST', // or 'PUT'
        //     body: JSON.stringify(data), // data can be `string` or {object}!
        //     headers:{'Content-Type': 'application/json'}
        //   };
        //   const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        //   const json = await response.json();
        //   console.log('json', json);
        //   ({ isGood, symbol, resultMesg} = json);
        //   // const isGood = json['isGood'];
        //   // const 
        //   console.log(`isGood: ${isGood}, symbol: ${symbol}, \nresultMesg: ${resultMesg}`);
        // }
        }
      } else {
        mesg = 'At least tokenSymbol or tokenCtrtAddrCFC should be valid';
        console.warn(mesg);

        const isGivingDefaultCFC = 1;
        if(isGivingDefaultCFC === 1) {
          ctrtAddr = '0xD24272DBF4642a2550e852BF2f802E446c919Ba0';
          mesg = 'Token symbol and Token contract values are empty. Using default value: ctrtAddr = '+ctrtAddr;
          isGood = true;
          showAlert(mesg);
        } else {
          mesg = 'Token symbol and Token contract values are empty';
          showAlert(mesg);
        }
      }
      console.log(`226----==isGood: ${isGood}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}, email_input: ${email_input}, assetbookAddr_input: ${assetbookAddr_input}, investorIndex_input: ${investorIndex_input}`);

      if(!isGood){
        console.warn(mesg+', resultMesg: '+resultMesg);
        showAlert(mesg+', resultMesg: '+resultMesg);
        return [isGood, tokenSymbol_input, ctrtAddr_input, undefined, undefined, undefined];
      }
      console.log(`-------------==`);

      if(funcName === 'emailToQty' && isEmpty(email_input)){
          email = 'achmed1923@gmail.com';
          mesg = 'Email is found empty. Using default value: '+ email;
          console.warn(mesg);
          showAlert(mesg);
        } else {
          email = email_input;
        }

      if(funcName === 'ownerToQty' && isEmpty(assetbookAddr_input)){
          assetbookAddr = '0xc297297Aa3437320CFd2CA0F988E4FC1B82E6A17';
          mesg = 'Assetbook is found empty. Using default value: '+ assetbookAddr;
          console.warn(mesg);
          showAlert(mesg);
      } else {
          assetbookAddr = assetbookAddr_input;
      }

      if(funcName === 'idxToOwner' && isEmpty(investorIndex_input)){
          investorIndex = '1';
          mesg = 'investorIndex is found empty. Using default value: '+ investorIndex;
          console.warn(mesg);
          showAlert(mesg);
        } else {
          investorIndex = investorIndex_input;
        }
      
      console.log(`----==isGood: ${isGood}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}, email: ${email}, assetbookAddr: ${assetbookAddr}, investorIndex: ${investorIndex}`);
      return [isGood, tokenSymbol, ctrtAddr, email, assetbookAddr, investorIndex];
    }



    $('#getCrowdfundingDetails').on('click',  async function (e) {
      console.log('inside getCrowdfundingDetails function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('getCrowdfundingDetails');
      //      console.log('result', result);
      if(!isGood || isEmpty(ctrtAddr)) return;

      const url = BcApiBase+`crowdfunding/getCrowdfundingDetails/${ctrtAddr}`;
      // http://localhost:3030/Contracts/getCrowdfundingDetails/
      const response = await fetch(url);
      const json = await response.json();

      const crowdfundingCtrtDetails = json['crowdfundingCtrtDetails'];
      console.log('crowdfundingCtrtDetails:', crowdfundingCtrtDetails);
      const TimeOfDeployment = crowdfundingCtrtDetails['0'];
      const maxTokenQtyForEachInvestmentFund = crowdfundingCtrtDetails['1'];
      const tokenSymbol = crowdfundingCtrtDetails['2'];
      const pricingCurrency = crowdfundingCtrtDetails['3'];
      const initialAssetPricing = crowdfundingCtrtDetails['4'];
      const maxTotalSupply = crowdfundingCtrtDetails['5'];
      const quantityGoal = crowdfundingCtrtDetails['6'];
      const quantitySold = crowdfundingCtrtDetails['7'];
      const CFSD = crowdfundingCtrtDetails['8'];
      const CFED = crowdfundingCtrtDetails['9'];
      const remainingQty = parseInt(maxTotalSupply) - parseInt(quantitySold);

      document.getElementById("TimeOfDeployment").innerText = TimeOfDeployment;
      document.getElementById("maxTokenQtyForEachInvestmentFund").innerText = maxTokenQtyForEachInvestmentFund;
      document.getElementById("tokenSymbol").innerText = tokenSymbol;
      document.getElementById("pricingCurrency").innerText = pricingCurrency;
      document.getElementById("initialAssetPricing").innerText = initialAssetPricing;
      document.getElementById("maxTotalSupply").innerText = maxTotalSupply;
      document.getElementById("quantityGoal").innerText = quantityGoal;
      document.getElementById("quantitySold").innerText = quantitySold;
      document.getElementById("remainingQty").innerText = remainingQty;
      document.getElementById("CFSD").innerText = CFSD;
      document.getElementById("CFED").innerText = CFED;
      //location.reload();

      const fundingDetails = json['fundingDetails'];
      console.log('fundingDetails:', fundingDetails);
      const fundingCindex = fundingDetails['0'];
      const fundingState = fundingDetails['1'];
      const stateDescription = fundingDetails['2'];

      document.getElementById("fundingCindex").innerText = fundingCindex;
      document.getElementById("fundingState").innerText = fundingState;
      document.getElementById("stateDescription").innerText = stateDescription;
    });



    $('#getInvestors').on('click',  async function (e) {
      console.log('inside getInvestors function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs();
      if(!isGood) return;

      const url = BcApiBase+`crowdfunding/getInvestors`;
      // http://localhost:3030/Contracts/getInvestors/

      const data = {ctrtAddr: ctrtAddr, indexStart: 0, amount: 0};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const investors = json['investors'];
      console.log('investors:', investors);

      const assetbookArray = investors['assetbookArray'];
      const investedTokenQtyArray = investors['investedTokenQtyArray'];
      console.log(`assetbookArray: ${assetbookArray} \ninvestedTokenQtyArray: ${investedTokenQtyArray}`);
      document.getElementById("assetbookArray").innerText = assetbookArray;
      document.getElementById("investedTokenQtyArray").innerText = investedTokenQtyArray;
    });

    
    $('#emailToQty').on('click',  async function (e) {
      console.log('inside emailToQty function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('emailToQty');
      if(!isGood) return;

      const url = BcApiBase+`crowdfunding/emailToQty`;
      // http://localhost:3030/Contracts/emailToQty/

      const data = {ctrtAddr: ctrtAddr, email: email};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const quantityOwned = json['quantityOwned'];
      console.log('quantityOwned:', quantityOwned);
      document.getElementById("quantityOwned").innerText = quantityOwned;
    });

    $('#ownerToQty').on('click',  async function (e) {
      console.log('inside ownerToQty function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('ownerToQty');
      if(!isGood) return;

      const url = BcApiBase+`crowdfunding/ownerToQty`;
      const data = {ctrtAddr: ctrtAddr, assetbookAddr: assetbookAddr};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const quantityOwned = json['quantityOwned'];
      console.log('quantityOwned:', quantityOwned);
      document.getElementById("quantityOwned").innerText = quantityOwned;
    });

    $('#idxToOwner').on('click',  async function (e) {
      console.log('inside idxToOwner function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('idxToOwner');
      if(!isGood) return;

      const url = BcApiBase+`crowdfunding/idxToOwner`;
      // http://localhost:3030/Contracts/idxToOwner/

      const data = {ctrtAddr: ctrtAddr, index: investorIndex};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const addrOwner = json['addrOwner'];
      console.log('addrOwner:', addrOwner);
      document.getElementById("addrOwner").innerText = addrOwner;
    });
  </script>

</body>

</html>
<!--
  http://localhost:3030/ContractExplorer/crowdfunding

-->