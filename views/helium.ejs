<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="" id="mesgDiv" style="margin: 15px;">
      <div class="card card-body d-none" id="mesg" style="background-color: #ffea00;"></div>
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>
        <!--
           style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);"
        -->
        
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Enter Helium contract address">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Helium Contract Address</span>
          </div>
          <input type="text" class="form-control" placeholder="HeliumCtrtAddr" aria-label="HeliumCtrtAddr" id="HeliumCtrtAddr" aria-describedby="HeliumCtrtAddr">
        </div>

        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          
          <div class="input-group-prepend">
            <button type="button" id="isAfterDeployment" class="btn btn-primary">isAfterDeployment</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_Admin" class="btn btn-primary">Helium_Admin</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_Chairman" class="btn btn-primary">Helium_Chairman</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_Director" class="btn btn-primary">Helium_Director</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_Manager" class="btn btn-primary">Helium_Manager</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_Owner" class="btn btn-primary">Helium_Owner</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_OwnerVote" class="btn btn-primary">Helium_OwnerVote</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_ChairmanVote" class="btn btn-primary">Helium_ChairmanVote</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_DirectorVote" class="btn btn-primary">Helium_DirectorVote</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_ManagerVote" class="btn btn-primary">Helium_ManagerVote</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="Helium_AdminVote" class="btn btn-primary">Helium_AdminVote</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="MinimumVotesForMultiSig" class="btn btn-primary">MinimumVotesForMultiSig</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="showPermissionCode" class="btn btn-primary">showPermissionCode</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="getEachVoteResult" class="btn btn-primary">getEachVoteResult</button>
          </div>

          <div class="input-group-prepend">
            <button type="button" id="isVotedApproved" class="btn btn-primary">isVotedApproved</button>
          </div>

        </div>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />
        <!-- -------------------------------  -->

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter input address !">
          <div class="input-group-prepend">
            <button type="button" id="PermissionList" class="btn btn-primary">PermissionList</button>
          </div>
          <input type="text" class="form-control" placeholder="input address" aria-label="addrInput1" id="addrInput1" aria-describedby="addrInput1">
        </div>


        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter input address !">
          <div class="input-group-prepend">
            <button type="button" id="managementList" class="btn btn-primary">managementList</button>
          </div>
          <input type="text" class="form-control" placeholder="input address" aria-label="addrInput2" id="addrInput2" aria-describedby="addrInput2">
        </div>


        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter input address!">
          <div class="input-group-prepend">
            <button type="button" id="checkCustomerService" class="btn btn-primary">checkCustomerService</button>
          </div>
          <input type="text" class="form-control" placeholder="input address" aria-label="addrInput3" id="addrInput3" aria-describedby="addrInput3">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter input address!">
          <div class="input-group-prepend">
            <button type="button" id="checkPlatformSupervisor" class="btn btn-primary">checkPlatformSupervisor</button>
          </div>
          <input type="text" class="form-control" placeholder="input address" aria-label="addrInput4" id="addrInput4" aria-describedby="addrInput4">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter input address!">
          <div class="input-group-prepend">
            <button type="button" id="checkAdmin" class="btn btn-primary">checkAdmin</button>
          </div>
          <input type="text" class="form-control" placeholder="input address" aria-label="addrInput5" id="addrInput5" aria-describedby="addrInput5">
        </div>


        <!--  -------------------------------  -->
      </div>

      <div class="col">
        <h5>Result</h5>
        <a href="crowdfunding" >Crowdfunding</a> | 
        <a href="tokenController" >tokenController</a> |
        <a href="TokenHCAT" >TokenHCAT</a> |
        <a href="IncomeManager" >IncomeManager</a> |
        <a href="Assetbook" >Assetbook</a> |
        <a href="Registry" >Registry</a> |
        <a href="Helium" >Helium</a> |
        <a href="Settlement" >Settlement</a>

        <br>
        Helium Contract Address: <span id="HeliumCtrtAddrM"></span><br>
        isAfterDeployment: <span id="isAfterDeploymentM"></span><br>
        Helium_Admin: <span id="Helium_AdminM"></span><br>
        Helium_Chairman: <span id="Helium_ChairmanM"></span><br>
        Helium_Director: <span id="Helium_DirectorM"></span><br>
        Helium_Manager: <span id="Helium_ManagerM"></span><br>
        Helium_Owner: <span id="Helium_OwnerM"></span><br>
        <br>
        Helium_OwnerVote: <span id="Helium_OwnerVoteM"></span><br>
        Helium_ChairmanVote: <span id="Helium_ChairmanVoteM"></span><br>
        Helium_DirectorVote: <span id="Helium_DirectorVoteM"></span><br>
        Helium_ManagerVote: <span id="Helium_ManagerVoteM"></span><br>
        Helium_AdminVote: <span id="Helium_AdminVoteM"></span><br>
        <br>
        MinimumVotesForMultiSig: <span id="MinimumVotesForMultiSigM"></span><br>
        PermissionList: <span id="PermissionListM"></span><br>
        showPermissionCode: <span id="showPermissionCodeM"></span><br>
        checkCustomerService: <span id="checkCustomerServiceM"></span><br>
        checkPlatformSupervisor: <span id="checkPlatformSupervisorM"></span><br>
        checkAdmin: <span id="checkAdminM"></span><br>
        getEachVoteResult: <span id="getEachVoteResultM"></span><br>
        isVotedApproved: <span id="isVotedApprovedM"></span><br>
        <br>
        error message: <span id="errorMessageM"></span><br>
      </div>
    </div>
  </div>
  <!-- Optional JavaScript

  -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/helium
    // $(document).ready(function() {
    //   $("#alertInputs").hide();
    // });

    const isGivingDefaultValue = 0;
    const ctrtAddrRGT = '';
    const ctrtAddrCFC = '';
    const ctrtAddrTTC = '';
    const ctrtAddrHCAT = '';
    const ctrtAddrIMC = '';
    const email1 = '';
    const assetbookAddr1 = '';
    const identityNumber1 = '';
    const operator1 = '';
    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'helium';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);
    
    
    const showMessage = (messageTxt) => {
      let mesgFinal = '';
      if(messageTxt !== undefined && messageTxt.length > 0) {
        if(messageTxt.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgFinal = messageTxt.slice(2);
        } else {
          mesgFinal = messageTxt;
          console.log('>> not removing first two char');
        }
        console.log('mesgFinal:', mesgFinal);

        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").removeClass('d-none');
      } else {
        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").addClass('d-none');
      }
      document.getElementById("errorMessageM").innerText = mesgFinal;
      
    }
    const checkAddr = (input, inputName, addrOutDefault) => {
      const has0x = input.substring(0, 2) === '0x';
      let isGood = false, addrOut, mesg;
      const isGivingDefaultValue = 1;
      if(!isEmpty(input)){
        if(input.length === 42){
          if(has0x){
            isGood = true;
            addrOut = input;
            mesg = `${inputName} has been entered correctly`;
          } else {
            mesg = '${inputName} should start with 0x';
          }
        } else {
          mesg = '${inputName} should have length of 42';
        }
      } else {
        mesg = `${inputName} should not be empty`;
      }
      if(!isGood){
        if(isGivingDefaultValue){
          isGood = true;
          addrOut = addrOutDefault;
          mesg += `. Using default value: ${addrOutDefault}`;
        }
      }
      console.log(`isGood: ${isGood} \nmesg: ${mesg}`);
      return [isGood, mesg, addrOut];
    }

    const addrZero = "0x0000000000000000000000000000000000000000";

    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let isGood, mesg = '', addrOut, mesgPublic = '';

      //抓取每個input欄位的值
      const HeliumCtrtAddr_input = document.getElementById("HeliumCtrtAddr").value;
      const addrInput1_input = document.getElementById("addrInput1").value;
      const addrInput2_input = document.getElementById("addrInput2").value;
      const addrInput3_input = document.getElementById("addrInput3").value;
      const addrInput4_input = document.getElementById("addrInput4").value;
      const addrInput5_input = document.getElementById("addrInput5").value;

      console.log(`\nHeliumCtrtAddr_input: ${HeliumCtrtAddr_input}
addrInput1_input: ${addrInput1_input}
addrInput2_input: ${addrInput2_input}
addrInput3_input: ${addrInput3_input}
addrInput4_input: ${addrInput4_input}
addrInput5_input: ${addrInput5_input} `);

      const HeliumCtrtAddrDefault = '0x391DAce017a97273e1231c7072F6cd9dCD05e798';
      const platformSupervisor1 = '0x17200B9d6F3D0ABBEccB0e451f50f7c6ed98b5DB';
      const customerService1 = '0x17200B9d6F3D0ABBEccB0e451f50f7c6ed98b5DB';

      console.log(`----------==After receiving input values`);
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr] = checkAddr(HeliumCtrtAddr_input, 'HeliumCtrtAddr', HeliumCtrtAddrDefault);

      const funcNameArray = ['isAfterDeployment', 'Helium_Admin', 'Helium_Chairman', 'Helium_Director', 'Helium_Manager', 'Helium_Owner', 'Helium_OwnerVote', 'Helium_ChairmanVote', 'Helium_DirectorVote', 'Helium_ManagerVote', 'Helium_AdminVote', 'MinimumVotesForMultiSig'];
      if(!isGoodHelium){
        

      } else if(funcNameArray.includes(funcName)){
        console.log('matched function name...');

      } else if(funcName === 'PermissionList'){
        [isGood, mesg, addrOut] = checkAddr(addrInput1_input, 'addrInput1', platformSupervisor1);

      } else if(funcName === 'managementList'){
        [isGood, mesg, addrOut] = checkAddr(addrInput2_input, 'addrInput2', platformSupervisor1);

      } else if(funcName === 'checkCustomerService'){
        [isGood, mesg, addrOut] = checkAddr(addrInput3_input, 'addrInput3', platformSupervisor1);

      } else if(funcName === 'checkPlatformSupervisor'){
        [isGood, mesg, addrOut] = checkAddr(addrInput4_input, 'addrInput4', customerService1);


      } else if(funcName === 'checkAdmin'){
        [isGood, mesg, addrOut] = checkAddr(addrInput5_input, 'addrInput5', customerService1);

      } else {
        console.log('funcName is out of range!');
      }
      console.log(`-------------==`);
      const mesgTotal = mesgHelium +', '+ mesg;
      if(mesgTotal){console.warn(mesgTotal);}
      showMessage(mesgTotal);

      return [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut];
    }
    $('#Helium_Admin').on('click', async function(e){
      console.log('inside Helium_Admin function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('Helium_Admin');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);
      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/heliumAdmin`;
        const data = { addrHelium: HeliumCtrtAddr };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);

        document.getElementById("Helium_AdminM").innerText = jsonObj['result'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    })
    $('#isAfterDeployment').on('click',  async function (e) {
      console.log('inside isAfterDeployment function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('isAfterDeployment');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);

      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/isAfterDeployment`;
        const data = { addrHelium: HeliumCtrtAddr };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);

        document.getElementById("isAfterDeploymentM").innerText = jsonObj['result'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    });

    $('#PermissionList').on('click',  async function (e) {
      console.log('inside PermissionList function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('PermissionList');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);

      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/PermissionList`;
        const data = { addrHelium: HeliumCtrtAddr, addrInput: addrOut };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        console.log(jsonObj['result']['permissionCode'])

        document.getElementById("PermissionListM").innerText = jsonObj['result']['permissionCode'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    });
    $('#checkCustomerService').on('click',  async function (e) {
      console.log('inside checkCustomerService function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('checkCustomerService');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);

      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/checkCustomerService`;
        const data = { addrHelium: HeliumCtrtAddr, addrInput: addrOut };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        console.log(jsonObj['result']['permissionCode'])

        document.getElementById("checkCustomerServiceM").innerText = jsonObj['result'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    });
    $('#checkPlatformSupervisor').on('click',  async function (e) {
      console.log('inside checkPlatformSupervisor function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('checkPlatformSupervisor');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);

      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/checkPlatformSupervisor`;
        const data = { addrHelium: HeliumCtrtAddr, addrInput: addrOut };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        console.log(jsonObj['result']['permissionCode'])

        document.getElementById("checkPlatformSupervisorM").innerText = jsonObj['result'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    });

    $('#checkAdmin').on('click',  async function (e) {
      console.log('inside checkAdmin function... ');
      const [isGoodHelium, mesgHelium, HeliumCtrtAddr, isGood, mesg, addrOut] = await checkInputs('checkAdmin');
      console.log(`isGoodHelium: ${isGoodHelium}, mesgHelium: ${mesgHelium}, HeliumCtrtAddr: ${HeliumCtrtAddr}, isGood: ${isGood}, mesg: ${mesg}, addrOut: ${addrOut}`);

      if(isGoodHelium){
        const url = BcApiBase+`heliumContract/checkAdmin`;
        const data = { addrHelium: HeliumCtrtAddr, addrInput: addrOut };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));

        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        console.log(jsonObj['result']['permissionCode'])

        document.getElementById("checkAdminM").innerText = jsonObj['result'];
        document.getElementById("HeliumCtrtAddrM").innerText = HeliumCtrtAddr;
      }
    });

  </script>

</body>

</html>