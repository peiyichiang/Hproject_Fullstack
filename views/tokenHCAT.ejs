<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="" id="mesgDiv" style="margin: 15px;">
        <div class="card card-body d-none" id="mesg" style="background-color: #ffea00;"></div>
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>

        <!-- Get Contract Address -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either symbol or token contract address!" >
            <div class="input-group-prepend">
              <span class="input-group-text" id="" >Symbol</span>
            </div>
            <input type="text" class="form-control" placeholder="token symbol" aria-label="tokenSymbol" id="tokenSymbol" aria-describedby="tokenSymbol">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either symbol or token contract address!" >
            <div class="input-group-prepend">
              <span class="input-group-text" id="" >Token Contract</span>
            </div>
            <input type="text" class="form-control" placeholder="token contract addr" aria-label="ctrtAddr" id="ctrtAddr" aria-describedby="ctrtAddr"
            value=''>
        </div>
        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="getTokenContractDetails" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either symbol or token contract address!" >Get HCAT Token Details</button>
        </div>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />

        <!-- Get Assetbook Address -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >
            <div class="input-group-prepend">
              <span class="input-group-text" id="" >Owner Identity Number</span>
            </div>
            <input type="text" class="form-control" placeholder="owner identity number" aria-label="identityNumber" id="identityNumber" aria-describedby="identityNumber">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >
          <div class="input-group-prepend">
            <span class="input-group-text" id="" >Owner Email</span>
          </div>
          <input type="text" class="form-control" placeholder="owner email" aria-label="email" id="email" aria-describedby="email">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >
          <div class="input-group-prepend">
            <span class="input-group-text" id="" >Owner Assetbook Address</span>
          </div>
          <input type="text" class="form-control" placeholder="owner assetbook address" aria-label="assetbookAddr" id="assetbookAddr" aria-describedby="assetbookAddr">
        </div>

        <!-- isOwnerAdded, getAccount, balanceOf -->
        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="isOwnerAdded" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >isOwnerAdded (Is this assetbook added into this contract?)</button>
          <button type="button" id="getAccount" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >getAccount (Get account details from assetbook address)</button>
          <button type="button" id="balanceOf" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >balanceOf (Get token balance from assetbook address)</button>

          <div class="input-group" style="margin: 25px 0px 0px 0px;">
              <div class="input-group-prepend">
                <span class="input-group-text" id="">TokenId Account Index</span>
              </div>
              <input type="text" class="form-control" placeholder="TokenId Account Index" aria-label="tokenIdAccountIndex" id="tokenIdAccountIndex" aria-describedby="tokenIdAccountIndex">
          </div>
          <button type="button" id="getTokenIdByIndex" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address! AND a TokenId Account Index" >getTokenIdByIndex (get tokenId from its token index inside an account)</button>


        <!-- getAccountIds -->
        <div class="input-group" style="margin: 25px 0px 0px 0px;">
              <div class="input-group-prepend">
                <span class="input-group-text" id="">Start Index1</span>
              </div>
              <input type="text" class="form-control" placeholder="Start Index1" aria-label="startIndex1" id="startIndex1" aria-describedby="startIndex1">
          </div>
          <div class="input-group" style="margin: 5px 0px 0px 0px;">
              <div class="input-group-prepend">
                <span class="input-group-text" id="">Amount1</span>
              </div>
              <input type="text" class="form-control" placeholder="Amount1" aria-label="amount1" id="amount1" aria-describedby="amount1">
          </div>

          <button type="button" id="getAccountIds" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >getAccountIds (Get all the tokenIds inside an account)</button>
        </div>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />

        <!-- Get TokenID -->
        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
            <div class="input-group" style="margin: 10px 0px 2px 0px;">
                <div class="input-group-prepend">
                  <span class="input-group-text" id="">tokenId</span>
                </div>
                <input type="text" class="form-control" placeholder="tokenId" aria-label="tokenId" id="tokenId" aria-describedby="tokenId">
            </div>
            <button type="button" id="idToAsset" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter a tokenId!">idToAsset (Get asset info from tokenId)</button>
            <button type="button" id="ownerOf" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter a tokenId!">ownerOf (Get assetbook address from tokenId)</button>
        </div>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />

        <!-- Get Owner Index -->
        <div class="input-group" style="margin: 10px 0px 5px 0px;">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Owner Index</span>
          </div>
          <input type="text" class="form-control" placeholder="Owner Index" aria-label="ownerIndex" id="ownerIndex" aria-describedby="ownerIndex">
        </div>
        <button type="button" id="idxToOwner" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter an owner index!">idxToOwner (Get assetbook address from assetbook index of the token)</button>


        <!-- Get getOwnersByOwnerIndex -->
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />
        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Start Index2</span>
            </div>
            <input type="text" class="form-control" placeholder="Start Index2" aria-label="startIndex2" id="startIndex2" aria-describedby="startIndex2">
        </div>

        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Amount2</span>
          </div>
          <input type="text" class="form-control" placeholder="Amount2" aria-label="amount2" id="amount2" aria-describedby="amount">
        </div>

        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="getOwnersByOwnerIndex" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter a start index and amount of requested owner addresses!">getOwnersByOwnerIndex (Get assetbook addresses from assetbook index and result amount. Give 0 and 0 for all owner assetbooks)</button>
        </div>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />

        <!-- allowance -->
        <!-- Get checkTokenApprove -->
        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Operator Address</span>
            </div>
            <input type="text" class="form-control" placeholder="operator address" aria-label="operator address" id="operatorAddr" aria-describedby="operator">
        </div>
        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="allowance" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either assetbook address and target address!" >allowance (Get the allowance amount given from one account to another)</button>
  
          <button type="button" id="checkTokenApprove" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >checkTokenApprove (Check if this token Id has been approved)</button>

          <button type="button" id="tokenApprove" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Must enter either Token Owner Identity Number, Email, or Assetbook Address!" >tokenApprove (approve an account as an operator acting as an representitive)</button>
        </div>
      </div>
<!--
   <button type="button" id="ckStringLength" class="btn btn-primary">ckStringLength (check a string length)</button>
-->
      <div class="col">
        <h5>Result</h5>
        <a href="crowdfunding" >Crowdfunding</a> | 
        <a href="tokenController" >tokenController</a> |
        <a href="TokenHCAT" >TokenHCAT</a> |
        <a href="IncomeManager" >IncomeManager</a> |
        <a href="Assetbook" >Assetbook</a> |
        <a href="Registry" >Registry</a> |
        <a href="Helium" >Helium</a> |
        <a href="Settlement" >Settlement</a>

        <br>
        symbol: <span id="symbolM"></span><br>
        name: <span id="name"></span><br>
        tokenId: <span id="tokenIdM"></span><br>
        siteSizeInKW: <span id="siteSizeInKW"></span><br>
        maxTotalSupply: <span id="maxTotalSupply"></span><br>
        totalSupply: <span id="totalSupply"></span><br>
        initialAssetPricing: <span id="initialAssetPricing"></span><br>
        pricingCurrency: <span id="pricingCurrency"></span><br>
        IRR20yrx100: <span id="IRR20yrx100"></span><br>
        tokenURI: <span id="tokenURI"></span><br>
        ownerCindex: <span id="ownerCindexM"></span><br>
        TimeOfDeployment: <span id="TimeOfDeploymentM"></span><br>
        
        <br>
        Asset: <span id="idToAssetM"></span><br>
        isOwnerAdded: <span id="isOwnerAddedM"></span><br>
        idxToOwner: <span id="idxToOwnerM"></span><br>
        ownerOf: <span id="ownerOfM"></span><br>
        getAccount: <span id="getAccountM"></span><br>
        balanceOf: <span id="balanceOfM"></span><br>
        getTokenIdByIndex: <span id="getTokenIdByIndexM"></span><br>
        allowance: <span id="allowanceM"></span><br>
        checkTokenApprove: <span id="checkTokenApproveM"></span><br>
        tokenApprove: <span id="tokenApproveM"></span><br>
        ckStringLength: <span id="ckStringLengthM"></span><br>

        getOwnersByOwnerIndex: <span id=""></span><br>
        <table class="table table-striped table-sm">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">Assetbook Addresses</th>
            </tr>
          </thead>
          <tbody id='tbodyOwners'>
          </tbody>
        </table>

        getAccountIds: <span id=""></span><br>
        <table class="table table-striped table-sm">
          <thead>
            <tr>
              <th scope="col">Account IDs</th>
            </tr>
          </thead>
          <tbody id='tbodyAccountIds'>
          </tbody>
        </table>

        error message: <span id="errorMessage"></span><br>
      </div>
    </div>
  </div>
  <!-- Optional JavaScript

  -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/tokenHCAT

    const isGivingDefaultValue = 0;
    const ctrtAddrRGT = '';
    const ctrtAddrCFC = '';
    const ctrtAddrTTC = '';
    const ctrtAddrHCAT = '';
    const ctrtAddrIMC = '';
    const email1 = '';
    const assetbookAddr1 = '';
    const identityNumber1 = '';
    const operator1 = '';

    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'tokenHCAT';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);

    const getHeliumCtrtAddr = async() => {
      console.log(`inside getHeliumCtrtAddr()...`);
      const url = BcApiBase+`heliumContract`;
      const response = await fetch(url);
      const text = await response.text();
      return text;
    }
    
    const showMessage = (messageTxt) => {
      let mesgFinal = '';
      if(messageTxt !== undefined && messageTxt.length > 0) {
        if(messageTxt.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgFinal = messageTxt.slice(2);
        } else {
          mesgFinal = messageTxt;
          console.log('>> not removing first two char');
        }
        console.log('mesgFinal:', mesgFinal);

        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").removeClass('d-none');
      } else {
        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").addClass('d-none');
      }
      document.getElementById("errorMessage").innerText = mesgFinal;
      
    }

    const checkAssetbook = async(identityNumber_input, email_input, assetbookAddr_input) => {
      let mesg = '', isGoodAssetbook, assetbookAddr, mesgAssetbook = '';
      const is_identityNumber_empty = isEmpty(identityNumber_input);
      const is_email_empty = isEmpty(email_input);
      const is_assetbookAddr_empty = isEmpty(assetbookAddr_input);
      const has0x = assetbookAddr_input.substring(0, 2) === '0x';

      console.log(`is_assetbookAddr_empty: ${is_assetbookAddr_empty}, is_identityNumber_empty: ${is_identityNumber_empty}, is_email_empty: ${is_email_empty} \n assetbookAddr_input.length: ${assetbookAddr_input.length}, does email_input have 0x: ${has0x}`);

      if(!is_assetbookAddr_empty){
        if(assetbookAddr_input.length === 42){
          if(has0x){
            isGoodAssetbook = true;
            assetbookAddr = assetbookAddr_input;
            console.log(`assetbookAddr has been entered correctly: assetbookAddr = ${assetbookAddr}`);
          } else {
            mesg += ', Assetbook contract address should start with 0x';
          }
        } else {
          mesg += ', tokenSymbol should have length of 42';
        }
      } else if(!is_identityNumber_empty){
        const url = BcApiBase+`getAssetbookFromIdentityNumber`;
        console.log('about to get assetbook ... url:', url);
        const data = {identityNumber: identityNumber_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));

        const json = await response.json();
        console.log('json', json);
        isGoodAssetbook = json.isGoodAssetbook;
        assetbookX = json.assetbookX;
        resultMesg = json.resultMesg;

        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          identityNumber = identityNumber_input;
        } else {
          mesg += ', failed at getting assetbookAddr from the identity number: '+identityNumber_input;
        }

      } else if(!is_email_empty){
        const url = BcApiBase+`getAssetbookFromEmail`;
        console.log('about to get assetbook ... url:', url);
        const data = {email: email_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        const json = await response.json();
        console.log('json', json);
        isGoodAssetbook = json.isGoodAssetbook;
        assetbookX = json.assetbookX;
        resultMesg = json.resultMesg;

        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          email = email_input;
        } else {
          mesg += ', failed at getting assetbookAddr from the identity number: '+email_input;
        }

      } else {
        mesg += ', At least one of assetbookAddr, identityNumber, or email should be valid';
        console.warn(mesg);

        if(isGivingDefaultValue) {
          assetbookAddr = assetbookAddr1;
          mesg += ', assetbookAddr is empty. Using default value: assetbookAddr = '+assetbookAddr;
          isGoodAssetbook = true;
        } else {
          mesg += ', assetbookAddr is empty';
        }
      }
      if(mesg.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgAssetbook = mesg.slice(2);
      }
      return [isGoodAssetbook, assetbookAddr, mesgAssetbook];
    }



    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let tokenSymbol_input, ctrtAddr_input, assetbookAddr_input, operatorAddr_input, tokenId_input, ownerIndex_input,  mesg = '', isGood, isGoodCtrtAddr, isGoodAssetbook, assetbookX, resultMesg = '', tokenSymbol, ctrtAddr, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex2, startIndex2_input, amount2, amount2_input,identityNumber, email, tokenIdAccountIndex, amount1, amount1_input,tokenIdAccountIndex_input, startIndex1, startIndex1_input;

      tokenSymbol_input = document.getElementById("tokenSymbol").value;

      ctrtAddr_input = document.getElementById("ctrtAddr").value;
      identityNumber_input = document.getElementById("identityNumber").value;
      email_input = document.getElementById("email").value;
      assetbookAddr_input = document.getElementById("assetbookAddr").value;
      operatorAddr_input = document.getElementById("operatorAddr").value;

      tokenId_input = document.getElementById("tokenId").value;
      startIndex1_input = document.getElementById("startIndex1").value;
      startIndex2_input = document.getElementById("startIndex2").value;
      ownerIndex_input = document.getElementById("ownerIndex").value;
      amount1_input = document.getElementById("amount1").value;
      amount2_input = document.getElementById("amount2").value;
      tokenIdAccountIndex_input = document.getElementById("tokenIdAccountIndex").value;

      const is_tokenSymbol_empty = isEmpty(tokenSymbol_input);
      const is_ctrtAddr_empty = isEmpty(ctrtAddr_input);

      const is_operatorAddr_empty = isEmpty(operatorAddr_input);
      const is_tokenId_empty = isEmpty(tokenId_input);
      const is_startIndex1_empty = isEmpty(startIndex1_input);
      const is_startIndex2_empty = isEmpty(startIndex2_input);
      const is_ownerIndex_empty = isEmpty(ownerIndex_input);
      const is_amount1_empty = isEmpty(amount1_input);
      const is_amount2_empty = isEmpty(amount2_input);
      const is_tokenIdAccountIndex_empty = isEmpty(tokenIdAccountIndex_input);

      console.log(`tokenSymbol_input: ${tokenSymbol_input}, \nctrtAddr_input: ${ctrtAddr_input}, \nidentityNumber_input: ${identityNumber_input}, \nemail_input: ${email_input},\nassetbookAddr_input: ${assetbookAddr_input}, \noperatorAddr_input: ${operatorAddr_input}, \ntokenId_input: ${tokenId_input}, \nstartIndex1_input: ${startIndex1_input}, \nstartIndex2_input: ${startIndex2_input}, \nis_ownerIndex_empty: ${is_ownerIndex_empty},\namount1_input: ${amount1_input}, \namount2_input: ${amount2_input}`);


      if(!is_tokenSymbol_empty){
        if(tokenSymbol_input.length === 8){
          const url = BcApiBase+`getCtrtAddrFromTokenSymbol`;
          console.log('about to find contract address ... url:',url);
          const data = {tokenSymbol: tokenSymbol_input, ctrtType: 'hcat721'};
          const options = {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data), // data can be `string` or {object}!
            headers:{'Content-Type': 'application/json'}
          };
          const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
          const json = await response.json();
          console.log('json', json);
          isGoodCtrtAddr = json.isGoodCtrtAddr;
          ctrtAddr = json.ctrtAddr;
          resultMesg = json.resultMesg;

          console.log(`isGoodCtrtAddr: ${isGoodCtrtAddr}, ctrtAddr: ${ctrtAddr}, \nresultMesg: ${resultMesg}`);

        } else {
          mesg += ', tokenSymbol should have length of 8';
        }

      } else if(!is_ctrtAddr_empty){
        if(ctrtAddr_input.length !== 42){
          mesg += ', HCAT Token contract address should have length of 42';
        } else if(ctrtAddr_input.substring(0, 2) !== '0x'){
          mesg += ', HCAT Token contract address should start with 0x';
        } else {
          isGoodCtrtAddr = true;
          ctrtAddr = ctrtAddr_input;
          console.log(`ctrtAddr has been entered correctly`);
        }
      } else {
        mesg += ', At least tokenSymbol or ctrtAddr should be valid';

        if(isGivingDefaultValue) {
          ctrtAddr = ctrtAddrHCAT;
          mesg += ', Token symbol and Token contract values are empty. Using default value: ctrtAddr = '+ctrtAddr;
          isGoodCtrtAddr = true;
        } else {
          mesg += ', Token symbol and Token contract values are empty';
        }
      }
      console.log(`check1----==isGoodCtrtAddr: ${isGoodCtrtAddr}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}`);

      if(!isGoodCtrtAddr){
        console.warn(mesg+', resultMesg: '+resultMesg);
        showMessage(mesg+', resultMesg: '+resultMesg);
        return [isGoodCtrtAddr, tokenSymbol_input, ctrtAddr_input, isGoodAssetbook, undefined, undefined, undefined, undefined, undefined, undefined];
      }

      console.log(`-------------==`);
      [isGoodAssetbook, assetbookAddr, mesgAssetbook] = await checkAssetbook(identityNumber_input, email_input, assetbookAddr_input);
      console.log(`check2----==isGoodAssetbook: ${isGoodAssetbook}, assetbookAddr: ${assetbookAddr}, mesgAssetbook: ${mesgAssetbook}`);


      if(funcName === 'isOwnerAdded'){
        mesg += mesgAssetbook;
        console.warn(mesgAssetbook);
      }

      if(funcName === 'idToAsset' || funcName === 'ownerOf'){
        if(is_tokenId_empty){
          if(isGivingDefaultValue){
            tokenId = 1;
            mesg += ', tokenId is found empty. Using default value: '+ tokenId;
          } else {
            mesg += ', tokenId is found empty.';
          }
        } else {
          tokenId = tokenId_input;
        }
      }

      if(funcName === 'idxToOwner'){
        if(is_ownerIndex_empty){
          if(isGivingDefaultValue){
            ownerIndex = 1;
            mesg += ', ownerIndex is found empty. Using default value: '+ ownerIndex;
          } else {
            mesg += ', ownerIndex is found empty.';
          }
        } else {
          ownerIndex = ownerIndex_input;
        }
      }
      
      if(funcName === 'getAccountIds'){
        if(is_startIndex1_empty){
          if(isGivingDefaultValue){
            startIndex1 = 0;
            mesg += ', startIndex1 is found empty. Using default value: '+ startIndex1;
          } else {
            mesg += ', startIndex1 is found empty.';
          }
        } else {
          startIndex1 = startIndex1_input;
        }

        mesg += mesgAssetbook;
        if(is_amount1_empty){
          if(isGivingDefaultValue){
            amount1 = 0; mesg += ', amount1 is found empty. Using default value: '+ amount1;
          } else {
            mesg += ', amount1 is found empty.';
          }
        } else {
          amount1 = amount1_input;
        }
      }
      if((startIndex1 > 0 && amount2 <= 0) || (startIndex1 <= 0 && amount1 > 0) && funcName === 'getOwnersByOwnerIndex' ){
        mesg += 'either both startIndex1 and amount1 are above zeros, or both are zeros';
      }


      if(funcName === 'getTokenIdByIndex') {
        if(is_tokenIdAccountIndex_empty){//TokenId Account Index
          if(isGivingDefaultValue){
            tokenIdAccountIndex = 1;
            mesg += ', tokenIdAccountIndex is found empty. Using default value: '+ tokenIdAccountIndex;
          } else {
            mesg += ', tokenIdAccountIndex is found empty.';
          }
        } else {
          tokenIdAccountIndex = parseInt(tokenIdAccountIndex_input);
        }
      }

      if(funcName === 'getAccount' || funcName === 'balanceOf'){
        mesg += mesgAssetbook;
      }

      if(funcName === 'getOwnersByOwnerIndex'){
        if(is_startIndex2_empty){
          if(isGivingDefaultValue){
            startIndex2 = 0;
            mesg += ', startIndex2 is found empty. Using default value: '+ startIndex2;
          } else {
            mesg += ', startIndex2 is found empty.';
          }
        } else {
          startIndex2 = startIndex2_input;
        }
        mesg += mesgAssetbook;
        if(is_amount2_empty){
          if(isGivingDefaultValue){
            amount2 = 0; mesg += ', amount2 is found empty. Using default value: '+ amount2;
          } else {
            mesg += ', amount2 is found empty.';
          }
        } else {
          amount2 = amount2_input;
        }
      }
      if((startIndex2 > 0 && amount2 <= 0) || (startIndex2 <= 0 && amount2 > 0) && funcName === 'getOwnersByOwnerIndex' ){
        mesg += 'either both startIndex2 and amount2 are above zeros, or both are zeros';
      }
      
      if(funcName === 'allowance' || funcName === 'checkTokenApprove' || funcName === 'tokenApprove') {
        if(is_operatorAddr_empty){
          if(isGivingDefaultValue){
            operatorAddr = operator1;
            mesg += ', operator is found empty. Using default value: '+ operatorAddr;
          } else {
            mesg += ', operator is found empty.';
          }
        } else {
          operatorAddr = operatorAddr_input;
        }
      }

      if(funcName === 'tokenApprove'){
        mesg += mesgAssetbook;

        if(is_amount2_empty){
          if(isGivingDefaultValue){
            amount2 = 0; mesg += ', amount2 is found empty. Using default value: '+ amount2;
          } else {
            mesg += ', amount2 is found empty.';
          }
        } else {
          amount2 = amount2_input;
        }
      }

      console.log(`-------------==`);
      console.warn(mesg);
      showMessage(mesg);

      console.log(`----==CheckInputs() \nisGoodCtrtAddr: ${isGoodCtrtAddr}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}, \nisGoodAssetbook: ${isGoodAssetbook}, assetbookAddr: ${assetbookAddr}, operatorAddr: ${operatorAddr}, tokenId: ${tokenId}, ownerIndex: ${ownerIndex} startIndex1: ${startIndex1}, startIndex2: ${startIndex2}, amount1: ${amount1}, amount2: ${amount2}, \ntokenIdAccountIndex: ${tokenIdAccountIndex}`);
      return [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex];
    }



    $('#getTokenContractDetails').on('click',  async function (e) {
      console.log('inside getTokenContractDetails function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('getTokenContractDetails');
      //      console.log('result', result);
      if(!isGoodCtrtAddr || isEmpty(ctrtAddr)) return;

      const url = BcApiBase+`tokenHCAT/getTokenContractDetails/${ctrtAddr}`;
      // http://localhost:3030/Contracts/getTokenContractDetails/
      const response = await fetch(url);
      const json = await response.json();
      console.log('after calling API');
      const getTokenContractDetails = json['getTokenContractDetails'];
      console.log('getTokenContractDetails:', getTokenContractDetails);
      const tokenIdM = getTokenContractDetails['0'];
      const siteSizeInKW = getTokenContractDetails['1'];
      const maxTotalSupply = getTokenContractDetails['2'];
      const totalSupply = getTokenContractDetails['3'];
      const initialAssetPricing = getTokenContractDetails['4'];
      const pricingCurrency =  json['pricingCurrency'];
      const IRR20yrx100 = getTokenContractDetails['6'];
      const name = json['name'];
      const symbol = json['symbol'];
      const tokenURI = json['tokenURI'];
      const ownerCindex = json['ownerCindex'];
      const TimeOfDeployment = json['TimeOfDeployment'];

      document.getElementById("tokenIdM").innerText = tokenIdM;
      document.getElementById("siteSizeInKW").innerText = siteSizeInKW;
      document.getElementById("maxTotalSupply").innerText = maxTotalSupply;
      document.getElementById("totalSupply").innerText = totalSupply;
      document.getElementById("initialAssetPricing").innerText = initialAssetPricing;
      document.getElementById("pricingCurrency").innerText = pricingCurrency;

      document.getElementById("IRR20yrx100").innerText = parseInt(IRR20yrx100)/100;
      document.getElementById("name").innerText = name;
      document.getElementById("symbolM").innerText = symbol;
      document.getElementById("tokenURI").innerText = tokenURI;
      document.getElementById("ownerCindexM").innerText = ownerCindex;
      document.getElementById("TimeOfDeploymentM").innerText = TimeOfDeployment;

      //location.reload();
    });

    $('#idToAsset').on('click',  async function (e) {
      console.log('inside idToAsset function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('idToAsset');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/idToAsset`;
      // http://localhost:3030/Contracts/tokenHCAT/idToAsset/
      const data = {ctrtAddr, tokenId };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("idToAssetM").innerText = jsonObj['idToAsset'];
    });

    $('#isOwnerAdded').on('click',  async function (e) {
      console.log('inside isOwnerAdded function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('isOwnerAdded');
      const ownerAddr = assetbookAddr;
      console.log(`isGoodAssetbook: ${isGoodAssetbook}, ownerAddr: ${ownerAddr}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/isOwnerAdded`;
      // http://localhost:3030/Contracts/tokenHCAT/isOwnerAdded/
      const data = {ctrtAddr, ownerAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("isOwnerAddedM").innerText = jsonObj['isOwnerAdded'];
    });

    $('#idxToOwner').on('click',  async function (e) {
      console.log('inside idxToOwner function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('idxToOwner');
      console.log(`ownerIndex: ${ownerIndex}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/idxToOwner`;
      // http://localhost:3030/Contracts/tokenHCAT/idxToOwner/
      const data = {ctrtAddr, ownerIndex };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("idxToOwnerM").innerText = jsonObj['idxToOwner'];
    });


    $('#ownerOf').on('click',  async function (e) {
      console.log('inside ownerOf function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('ownerOf');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/ownerOf`;
      // http://localhost:3030/Contracts/tokenHCAT/ownerOf/
      const data = {ctrtAddr, tokenId };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("ownerOfM").innerText = jsonObj['ownerOf'];
    });

    $('#getOwnersByOwnerIndex').on('click',  async function (e) {
      console.log('inside getOwnersByOwnerIndex function... \ne.target:', e.target);
      let mesg2 = '';
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('getOwnersByOwnerIndex');
      console.log(`[getOwnersByOwnerIndex] startIndex2: ${startIndex2}, amount2: ${amount2}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;
      if((startIndex2 > 0 && amount2 > 0) || (startIndex2 === 0 && amount2 === 0)){
        const url = BcApiBase+`tokenHCAT/getOwnersByOwnerIndex`;
        // http://localhost:3030/Contracts/tokenHCAT/getOwnersByOwnerIndex/
        const data = {ctrtAddr, startIndex: startIndex2, amount: amount2 };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));
        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        //document.getElementById("getOwnersByOwnerIndexM").innerText = jsonObj['getOwnersByOwnerIndex'];
        const arrayData = jsonObj['getOwnersByOwnerIndex'];
        console.log('arrayData:', arrayData);

        const tbody = document.getElementById('tbodyOwners');
        let tbodyContent = '';
        arrayData.forEach((item,idx) => {
          console.log(`cur= ${item}, idx= ${idx}`);
          const row = '<tr><th scope="row">'+idx+'</th><td>'+item+'</td></tr>';
          tbodyContent = tbodyContent + row;
        });
        tbody.innerHTML = tbodyContent;

      } else {

      }
    });

    $('#getAccount').on('click',  async function (e) {
      console.log('inside getAccount function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('getAccount');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/getAccount`;
      // http://localhost:3030/Contracts/tokenHCAT/getAccount/
      const data = {ctrtAddr, assetbookAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("getAccountM").innerText = JSON.stringify(jsonObj['getAccount']);
    });

    $('#balanceOf').on('click',  async function (e) {
      console.log('inside balanceOf function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('balanceOf');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/balanceOf`;
      // http://localhost:3030/Contracts/tokenHCAT/balanceOf/
      const data = {ctrtAddr, assetbookAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("balanceOfM").innerText = jsonObj['balanceOf'];
    });
  /* idToAsset (get Owner Address from tokenId), isOwnerAdded
idxToOwner   ownerCindex    ownerOf   getOwnersByOwnerIndex
getAccount   balanceOf      getTokenIdByIndex
getAccountIds   allowance    checkTokenApprove    ckStringLength
*/
    $('#getTokenIdByIndex').on('click',  async function (e) {
      console.log('inside getTokenIdByIndex function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('getTokenIdByIndex');
      console.log(`---------==\ntokenIdAccountIndex: ${tokenIdAccountIndex}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/getTokenIdByIndex`;
      // http://localhost:3030/Contracts/tokenHCAT/getTokenIdByIndex/
      const data = {ctrtAddr, assetbookAddr, tokenIdAccountIndex };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("getTokenIdByIndexM").innerText = jsonObj['getTokenIdByIndex'];
    });

    $('#getAccountIds').on('click',  async function (e) {
      console.log('inside getAccountIds function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('getAccountIds');
      console.log(`[getAccountIds] assetbookAddr: ${assetbookAddr}, startIndex1: ${startIndex1}, amount1: ${amount1}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/getAccountIds`;
      // http://localhost:3030/Contracts/tokenHCAT/getAccountIds/
      const data = {ctrtAddr, assetbookAddr, startIndex: startIndex1, amount: amount1 };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);

      const arrayData = jsonObj['getAccountIds'];
      //console.log('arrayData:', arrayData);

      const tbody = document.getElementById('tbodyAccountIds');
      let rowContent = '', row = '', tbodyContent = '';
      if(arrayData.length === 0){

      } else if(arrayData.length === 1){
        tbodyContent = ''+arrayData[0];

      } else if(arrayData.length > 1){
        rowContent = ''+arrayData[0];
        for (let idx = 1; idx < arrayData.length; idx++) {
          //console.log(`cur= ${arrayData[idx]}, idx= ${idx}`);
          rowContent = rowContent +', '+ arrayData[idx];
        }
        row = '<tr></th><td>'+rowContent+'</td></tr>';
        tbodyContent = tbodyContent + row;

      }
      tbody.innerHTML = tbodyContent;
    });

    $('#allowance').on('click',  async function (e) {
      console.log('inside allowance function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('allowance');
      console.log(`[allowance] ctrtAddr: ${ctrtAddr}, assetbookAddr: ${assetbookAddr}, operatorAddr: ${operatorAddr}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/allowance`;
      // http://localhost:3030/Contracts/tokenHCAT/allowance/
      const data = {ctrtAddr, assetbookAddr, operatorAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("allowanceM").innerText = jsonObj['allowance'];
    });

    $('#checkTokenApprove').on('click',  async function (e) {
      console.log('inside checkTokenApprove function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('checkTokenApprove');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/checkTokenApprove`;
      // http://localhost:3030/Contracts/tokenHCAT/checkTokenApprove/
      const data = {ctrtAddr, operatorAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("checkTokenApproveM").innerText = jsonObj['checkTokenApprove'];
    });

    $('#tokenApprove').on('click',  async function (e) {
      console.log('inside tokenApprove function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex1, startIndex2, amount1, amount2, tokenIdAccountIndex] = await checkInputs('tokenApprove');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/tokenApprove`;
      // http://localhost:3030/Contracts/tokenHCAT/tokenApprove/
      const data = {ctrtAddr, operatorAddr, amount2 };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("tokenApproveM").innerText = jsonObj['tokenApprove'];
    });
  </script>

</body>

</html>
<!--
  http://localhost:3030/ContractExplorer/tokenHCAT

-->