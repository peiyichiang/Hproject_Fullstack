<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="" id="mesgDiv" style="margin: 15px;">
      <div class="card card-body d-none" id="mesg" style="background-color: #ffea00;"></div>
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Symbol</span>
            </div>
            <input type="text" class="form-control" placeholder="token symbol" aria-label="tokenSymbol" id="tokenSymbol" aria-describedby="tokenSymbol">
        </div>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="">Contract</span>
            </div>
            <input type="text" class="form-control" placeholder="token contract addr" aria-label="tokenCtrtAddr" id="tokenCtrtAddr" aria-describedby="tokenCtrtAddr"
            value=''>
        </div>


        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="getHTokenControllerDetails" class="btn btn-primary">Get TokenController Details</button>
        </div>

      </div>

      <div class="col">
        <h5>Result</h5>
        <a href="crowdfunding" >Crowdfunding</a> | 
        <a href="tokenController" >tokenController</a> |
        <a href="TokenHCAT" >TokenHCAT</a> |
        <a href="IncomeManager" >IncomeManager</a> |
        <a href="Assetbook" >Assetbook</a> |
        <a href="Registry" >Registry</a> |
        <a href="Settlement" >Settlement</a><br>

        TimeOfDeployment: <span id="TimeOfDeployment"></span><br>
        TimeUnlock: <span id="TimeUnlock"></span><br>
        TimeValid: <span id="TimeValid"></span><br>
        isLockedForRelease: <span id="isLockedForRelease"></span><br>
        isTokenApproved: <span id="isTokenApproved"></span><br>

        <br>
        isTokenApprovedOperational: <span id="isTokenApprovedOperational"></span><br>
        tokenState: <span id="tokenState"></span><br>
        
        error message: <span id="errorMessage"></span><br>

      </div>
    </div>
  </div>
  <!-- Optional JavaScript

  -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/tokenController

    // $(document).ready(function() {
    //   $("#alertInputs").hide();
    // });
    const isGivingDefaultValue = 0;
    const ctrtAddrRGT = '';
    const ctrtAddrCFC = '';
    const ctrtAddrTTC = '';
    const ctrtAddrHCAT = '';
    const ctrtAddrIMC = '';
    const email1 = '';
    const assetbookAddr1 = '';
    const identityNumber1 = '';
    const operator1 = '';
        
    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'tokenController';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);

    const getHeliumCtrtAddr = async() => {
      console.log(`inside getHeliumCtrtAddr()...`);
      const url = BcApiBase+`heliumContract`;
      const response = await fetch(url);
      const text = await response.text();
      return text;
    }
    
    const showMessage = (messageTxt) => {
      let mesgFinal = '';
      if(messageTxt !== undefined && messageTxt.length > 0) {
        if(messageTxt.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgFinal = messageTxt.slice(2);
        } else {
          mesgFinal = messageTxt;
          console.log('>> not removing first two char');
        }
        console.log('mesgFinal:', mesgFinal);

        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").removeClass('d-none');
      } else {
        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").addClass('d-none');
      }
      document.getElementById("errorMessage").innerText = mesgFinal;
      
    }
    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let tokenSymbol_input, ctrtAddr_input, mesg, isGood, resultMesg = '', tokenSymbol, ctrtAddr, email, assetbookAddr, investorIndex;

      tokenSymbol_input = document.getElementById("tokenSymbol").value;
      ctrtAddr_input = document.getElementById("tokenCtrtAddr").value;

      const isTokenSymbolEmpty = isEmpty(tokenSymbol_input);
      const istokenCtrtAddr_empty = isEmpty(ctrtAddr_input);

      if(!isTokenSymbolEmpty){
        if(tokenSymbol_input.length === 8){
          const url = BcApiBase+`getCtrtAddrFromTokenSymbol`;
          console.log('about to find contract address ... url:',url);
          const data = {tokenSymbol: tokenSymbol_input, ctrtType: 'tokencontroller'};
          const options = {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data), // data can be `string` or {object}!
            headers:{'Content-Type': 'application/json'}
          };
          const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
          const json = await response.json();
          console.log('json', json);
          isGood = json.isGoodCtrtAddr;
          ctrtAddr = json.ctrtAddr;
          resultMesg = json.resultMesg;
          console.log(`isGood: ${isGood}, ctrtAddr: ${ctrtAddr}, \nresultMesg: ${resultMesg}`);

        } else {
          mesg = 'tokenSymbol should have length of 8';
        }

      } else if(!istokenCtrtAddr_empty){
        if(ctrtAddr_input.length !== 42){
          mesg = 'TokenController contract address should have length of 42';
        } else if(ctrtAddr_input.substring(0, 2) !== '0x'){
          mesg = 'TokenController contract address should start with 0x';
        } else {
          isGood = true;
          ctrtAddr = ctrtAddr_input;
        // if(!tokenSymbol_input){
        //   const url = BcApiBase+`getTokenSymbolFromCtrtAddr`;
        //   console.log('tokenSymbol_input is empty... url:',url);
        //   const data = {ctrtAddr: ctrtAddr_input, ctrtType: contractType};
        //   const options = {
        //     method: 'POST', // or 'PUT'
        //     body: JSON.stringify(data), // data can be `string` or {object}!
        //     headers:{'Content-Type': 'application/json'}
        //   };
        //   const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        //   const json = await response.json();
        //   console.log('json', json);
        //   // const isGood = json['isGood'];
        //   // const 
        //   console.log(`isGood: ${isGood}, symbol: ${symbol}, \nresultMesg: ${resultMesg}`);
        // }
        }
      } else {
        mesg = 'At least tokenSymbol or tokenCtrtAddr should be valid';
        console.warn(mesg);

        const isGivingDefaultCFC = 0;
        if(isGivingDefaultCFC === 1) {
          ctrtAddr = ctrtAddrCFC;
          mesg = 'Token symbol and Token contract values are empty. Using default value: ctrtAddr = '+ctrtAddr;
          isGood = true;
        } else {
          mesg = 'Token symbol and Token contract values are empty';
        }
      }
      console.log(`226----==isGood: ${isGood}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}`);

      if(!isGood){
        console.warn(mesg+', resultMesg: '+resultMesg);
        showMessage(mesg+', resultMesg: '+resultMesg);
        return [isGood, tokenSymbol_input, ctrtAddr_input, undefined, undefined, undefined];
      }
      console.log(`-------------==`);
      console.warn(mesg);
      showMessage(mesg);


      console.log(`----==isGood: ${isGood}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}`);
      return [isGood, tokenSymbol, ctrtAddr, email, assetbookAddr, investorIndex];
    }



    $('#getHTokenControllerDetails').on('click',  async function (e) {
      console.log('inside getHTokenControllerDetails function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('getHTokenControllerDetails');
      //      console.log('result', result);
      if(!isGood || isEmpty(ctrtAddr)) return;

      const url = BcApiBase+`tokenController/getHTokenControllerDetails/${ctrtAddr}`;
      // http://localhost:3030/Contracts/getHTokenControllerDetails/
      const response = await fetch(url);
      const json = await response.json();

      const getHTokenControllerDetails = json['getHTokenControllerDetails'];
      console.log('getHTokenControllerDetails:', getHTokenControllerDetails);
      const TimeOfDeployment = getHTokenControllerDetails['0'];
      const TimeUnlock = getHTokenControllerDetails['1'];
      const TimeValid = getHTokenControllerDetails['2'];
      const isLockedForRelease = getHTokenControllerDetails['3'];
      const isTokenApproved = getHTokenControllerDetails['4'];

      document.getElementById("TimeOfDeployment").innerText = TimeOfDeployment;
      document.getElementById("TimeUnlock").innerText = TimeUnlock;
      document.getElementById("TimeValid").innerText = TimeValid;
      document.getElementById("isLockedForRelease").innerText = isLockedForRelease;
      document.getElementById("isTokenApproved").innerText = isTokenApproved;
      //location.reload();

      const details = json['details'];
      console.log('details:', details);
      const isTokenApprovedOperational = details['0'];
      const tokenState = details['1'];

      document.getElementById("isTokenApprovedOperational").innerText = isTokenApprovedOperational;
      document.getElementById("tokenState").innerText = tokenState;
    });



    $('#getInvestors').on('click',  async function (e) {
      console.log('inside getInvestors function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs();
      if(!isGood) return;

      const url = BcApiBase+`tokenController/getInvestors`;
      // http://localhost:3030/Contracts/getInvestors/

      const data = {ctrtAddr: ctrtAddr, indexStart: 0, amount: 0};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const investors = json['investors'];
      console.log('investors:', investors);

      const assetbookArray = investors['assetbookArray'];
      const investedTokenQtyArray = investors['investedTokenQtyArray'];
      console.log(`assetbookArray: ${assetbookArray} \ninvestedTokenQtyArray: ${investedTokenQtyArray}`);
      document.getElementById("assetbookArray").innerText = assetbookArray;
      document.getElementById("investedTokenQtyArray").innerText = investedTokenQtyArray;
    });

    
    $('#emailToQty').on('click',  async function (e) {
      console.log('inside emailToQty function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('emailToQty');
      if(!isGood) return;

      const url = BcApiBase+`tokenController/emailToQty`;
      // http://localhost:3030/Contracts/emailToQty/

      const data = {ctrtAddr: ctrtAddr, email: email};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const quantityOwned = json['quantityOwned'];
      console.log('quantityOwned:', quantityOwned);
      document.getElementById("quantityOwned").innerText = quantityOwned;
    });

    $('#ownerToQty').on('click',  async function (e) {
      console.log('inside ownerToQty function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('ownerToQty');
      if(!isGood) return;

      const url = BcApiBase+`tokenController/ownerToQty`;
      const data = {ctrtAddr: ctrtAddr, assetbookAddr: assetbookAddr};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const quantityOwned = json['quantityOwned'];
      console.log('quantityOwned:', quantityOwned);
      document.getElementById("quantityOwned").innerText = quantityOwned;
    });

    $('#idxToOwner').on('click',  async function (e) {
      console.log('inside idxToOwner function... \ne.target:', e.target);
      const [isGood, tokenSymbol_in, ctrtAddr, email, assetbookAddr, investorIndex] = await checkInputs('idxToOwner');
      if(!isGood) return;

      const url = BcApiBase+`tokenController/idxToOwner`;
      // http://localhost:3030/Contracts/idxToOwner/

      const data = {ctrtAddr: ctrtAddr, index: investorIndex};
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const json = await response.json();
      const addrOwner = json['addrOwner'];
      console.log('addrOwner:', addrOwner);
      document.getElementById("addrOwner").innerText = addrOwner;
    });
  </script>

</body>

</html>
<!--
  http://localhost:3030/ContractExplorer/tokenController

-->