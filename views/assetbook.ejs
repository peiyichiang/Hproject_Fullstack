<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="">
  <link rel="stylesheet" href="/css/ctrtInterfaceStyles.css">
  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
              <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Identity Number</span>
            </div>
            <input type="text" class="form-control" placeholder="owner identity number" aria-label="identityNumber" id="identityNumber" aria-describedby="identityNumber">
        </div>

        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Email</span>
          </div>
          <input type="text" class="form-control" placeholder="owner email" aria-label="email" id="email" aria-describedby="email">
        </div>

        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Assetbook Address</span>
          </div>
          <input type="text" class="form-control" placeholder="owner assetbook address" aria-label="assetbookAddr" id="assetbookAddr" aria-describedby="assetbookAddr">
        </div>

        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Amount</span>
          </div>
          <input type="text" class="form-control" placeholder="Amount" aria-label="amount" id="amount" aria-describedby="amount">
        </div>

        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Operator Address</span>
          </div>
          <input type="text" class="form-control" placeholder="operator address" aria-label="operator address" id="operatorAddr" aria-describedby="operator">
        </div>


        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">
          <button type="button" id="getAssetbookDetails" class="btn btn-primary">Get Assetbook Details</button>

          <button type="button" id="getAccount" class="btn btn-primary">getAccount (Get account details from assetbook address)</button>

          <button type="button" id="getAccountIds" class="btn btn-primary">getAccountIds (Get all the tokenIds inside an account)</button>
          <button type="button" id="allowance" class="btn btn-primary">allowance (Get the allowance amount given from one account to another)</button>
          
          <button type="button" id="checkTokenApprove" class="btn btn-primary">checkTokenApprove (Check if this token Id has been approved)</button>
          <button type="button" id="tokenApprove" class="btn btn-primary">tokenApprove (approve an account as an operator acting as an representitive)</button>

        </div>

      </div>

      <div class="col">
        <h5>Result</h5>
        symbol: <span id="symbolM"></span><br>
        name: <span id="name"></span><br>
        
        <br>
        ownerOf: <span id="ownerOfM"></span><br>
        getAccount: <span id="getAccountM"></span><br>
        balanceOf: <span id="balanceOfM"></span><br>
        getTokenIdByIndex: <span id="getTokenIdByIndexM"></span><br>
        allowance: <span id="allowanceM"></span><br>
        checkTokenApprove: <span id="checkTokenApproveM"></span><br>
        tokenApprove: <span id="tokenApproveM"></span><br>
        ckStringLength: <span id="ckStringLengthM"></span><br>

      </div>
    </div>
  </div>
  <!-- Optional JavaScript

  -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/assetbook
    // $(document).ready(function() {
    //   $("#alertInputs").hide();
    // });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'tokenHCAT';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);

    const getHeliumCtrtAddr = async() => {
      console.log(`inside getHeliumCtrtAddr()...`);
      const url = BcApiBase+`heliumContract`;
      const response = await fetch(url);
      const text = await response.text();
      return text;
    }
    
    const showAlert = (messageTxt) => {
      document.getElementById("alertInputs").innerText = messageTxt;
      //jQuery("#alertInputs").fadeOut("slow");
      $('.collapse').collapse();
      $("#alertInputs");/*.fadeTo(10000, 500).slideUp(500, function() {
        $("#alertInputs").slideUp(500);
      });*/
    }


    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let tokenSymbol_input, ctrtAddr_input, assetbookAddr_input, operatorAddr_input, tokenId_input, ownerIndex_input, startIndex_input, amount_input, mesg, isGoodCtrtAddr, isGoodAssetbook, assetbookX, resultMesg = '', tokenSymbol, ctrtAddr, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount, identityNumber, email;

      tokenSymbol_input = document.getElementById("tokenSymbol").value;

      ctrtAddr_input = document.getElementById("ctrtAddr").value;
      identityNumber_input = document.getElementById("identityNumber").value;
      email_input = document.getElementById("email").value;
      assetbookAddr_input = document.getElementById("assetbookAddr").value;
      operatorAddr_input = document.getElementById("operatorAddr").value;

      tokenId_input = document.getElementById("tokenId").value;
      startIndex_input = document.getElementById("startIndex").value;
      ownerIndex_input = document.getElementById("ownerIndex").value;
      amount_input = document.getElementById("amount").value;
      
      const is_tokenSymbol_empty = isEmpty(tokenSymbol_input);
      const is_ctrtAddr_empty = isEmpty(ctrtAddr_input);
      const is_identityNumber_empty = isEmpty(identityNumber_input);
      const is_email_empty = isEmpty(email_input);
      const is_assetbookAddr_empty = isEmpty(assetbookAddr_input);
      const is_operatorAddr_empty = isEmpty(operatorAddr_input);
      const is_tokenId_empty = isEmpty(tokenId_input);
      const is_startIndex_empty = isEmpty(startIndex_input);
      const is_ownerIndex_empty = isEmpty(ownerIndex_input);
      const is_amount_empty = isEmpty(amount_input);

      console.log(`tokenSymbol_input: ${tokenSymbol_input}, \nctrtAddr_input: ${ctrtAddr_input}, \nidentityNumber_input: ${identityNumber_input}, \nemail_input: ${email_input},\nassetbookAddr_input: ${assetbookAddr_input}, \noperatorAddr_input: ${operatorAddr_input}, \ntokenId_input: ${tokenId_input}, \nstartIndex_input: ${startIndex_input}, \nis_ownerIndex_empty: ${is_ownerIndex_empty},\namount_input: ${amount_input}`);


      if(!is_tokenSymbol_empty){
        if(tokenSymbol_input.length === 8){
          const url = BcApiBase+`getCtrtAddrFromTokenSymbol`;
          console.log('about to find contract address ... url:',url);
          const data = {tokenSymbol: tokenSymbol_input, ctrtType: 'hcat721'};
          const options = {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data), // data can be `string` or {object}!
            headers:{'Content-Type': 'application/json'}
          };
          const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
          const json = await response.json();
          console.log('json', json);
          ({ isGoodCtrtAddr, ctrtAddr, resultMesg} = json);
          console.log(`isGoodCtrtAddr: ${isGoodCtrtAddr}, ctrtAddr: ${ctrtAddr}, \nresultMesg: ${resultMesg}`);

        } else {
          mesg = 'tokenSymbol should have length of 8';
        }

      } else if(!is_ctrtAddr_empty){
        if(ctrtAddr_input.length !== 42){
          mesg = 'HCAT Token contract address should have length of 42';
        } else if(ctrtAddr_input.substring(0, 2) !== '0x'){
          mesg = 'HCAT Token contract address should start with 0x';
        } else {
          isGoodCtrtAddr = true;
          ctrtAddr = ctrtAddr_input;
        }
      } else {
        mesg = 'At least tokenSymbol or ctrtAddr should be valid';
        console.warn(mesg);

        const isGivingDefault = 1;
        if(isGivingDefault === 1) {
          ctrtAddr = '0xA80c0A88e38aa61190A3Ad41bd3907774D291f87';
          mesg = 'Token symbol and Token contract values are empty. Using default value: ctrtAddr = '+ctrtAddr;
          isGoodCtrtAddr = true;
          showAlert(mesg);
        } else {
          mesg = 'Token symbol and Token contract values are empty';
          showAlert(mesg);
        }
      }
      console.log(`282----==isGoodCtrtAddr: ${isGoodCtrtAddr}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}`);

      if(!is_assetbookAddr_empty){
        if(assetbookAddr_input.length === 42){
          if(email_input.substring(0, 2) === '0x'){
            isGoodAssetbook = true;
            assetbookAddr = assetbookAddr_input;
          } else {
            mesg = 'Assetbook contract address should start with 0x';
            showAlert(mesg);
          }
        } else {
          mesg = 'tokenSymbol should have length of 42';
          showAlert(mesg);
        }
      } else if(!is_identityNumber_empty){
        const url = BcApiBase+`getAssetbookFromIdentityNumber`;
        console.log('about to get assetbook ... url:', url);
        const data = {identityNumber: identityNumber_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        const json = await response.json();
        console.log('json', json);
        ({isGoodAssetbook, assetbookX, resultMesg} = json);
        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          identityNumber = identityNumber_input;
        } else {
          mesg = 'failed at getting assetbookAddr from the identity number: '+identityNumber_input;
          showAlert(mesg);
        }

      } else if(!is_email_empty){
        const url = BcApiBase+`getAssetbookFromEmail`;
        console.log('about to get assetbook ... url:', url);
        const data = {email: email_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        const json = await response.json();
        console.log('json', json);
        ({isGoodAssetbook, assetbookX, resultMesg} = json);
        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          email = email_input;
        } else {
          mesg = 'failed at getting assetbookAddr from the identity number: '+email_input;
          showAlert(mesg);
        }


      } else {
        mesg = 'At least one of assetbookAddr, identityNumber, or email should be valid';
        console.warn(mesg);

        const isGivingDefault = 1;
        if(isGivingDefault === 1) {
          assetbookAddr = '0x19746ba6B0c85052fB24f4120c9072789d0f7301';
          mesg = 'Token symbol and Token contract values are empty. Using default value: assetbookAddr = '+assetbookAddr;
          isGoodAssetbook = true;
          showAlert(mesg);
        } else {
          mesg = 'Token symbol and Token contract values are empty';
          showAlert(mesg);
        }
      }
      /*
      if( (funcName === 'isOwnerAdded' || funcName === 'getAccount' || funcName === 'balanceOf' || funcName === 'getTokenIdByIndex'|| funcName === 'getAccountIds' || funcName === 'allowance') && is_assetbookAddr_empty){
      }*/
      console.log(`345----==isGoodAssetbook: ${isGoodAssetbook}, tokenSymbol: ${tokenSymbol}, assetbookAddr: ${assetbookAddr}, \nresultMesg: ${resultMesg}`);

      if(!isGoodCtrtAddr){
        console.warn(mesg+', resultMesg: '+resultMesg);
        showAlert(mesg+', resultMesg: '+resultMesg);
        return [isGoodCtrtAddr, tokenSymbol_input, ctrtAddr_input, isGoodAssetbook, undefined, undefined, undefined, undefined, undefined, undefined];
      }
      console.log(`-------------==`);

      if((funcName === 'idToAsset' || funcName === 'ownerOf') && is_tokenId_empty){
        tokenId = 1;
        mesg = 'tokenId is found empty. Using default value: '+ tokenId;
        console.warn(mesg);
        showAlert(mesg);
      } else {
        tokenId = tokenId_input;
      }



/*
  is_tokenSymbol_empty   is_ctrtAddr_empty   is_assetbookAddr_empty
  is_operatorAddr_empty   is_tokenId_empty   is_startIndex_empty  is_amount_empty
*/
/* idToAsset (get Owner Address from tokenId), isOwnerAdded
idxToOwner   ownerCindex    ownerOf   getOwnersByOwnerIndex
getAccount   balanceOf      getTokenIdByIndex
getAccountIds   allowance    checkTokenApprove    ckStringLength
*/
      if((funcName === 'idxToOwner') && is_ownerIndex_empty){
        ownerIndex = 1;
        mesg = 'ownerIndex is found empty. Using default value: '+ ownerIndex;
        //if(mesg.substring(0, 2) === ', ') mesg.slice(2);
        console.warn(mesg);
        showAlert(mesg);
      } else {
        ownerIndex = ownerIndex_input;
      }

      if((funcName === 'getOwnersByOwnerIndex' || funcName === 'getTokenIdByIndex' || funcName === 'getAccountIds') && is_startIndex_empty){
        startIndex = 0;
        mesg = 'startIndex is found empty. Using default value: '+ startIndex;
        //if(mesg.substring(0, 2) === ', ') mesg.slice(2);
        console.warn(mesg);
        showAlert(mesg);
      } else {
        startIndex = startIndex_input;
      }

      if((funcName === 'getOwnersByOwnerIndex' || funcName === 'getAccountIds' || funcName === 'tokenApprove') && is_amount_empty){
        amount = 0;
        mesg = 'amount is found empty. Using default value: '+ amount;
        console.warn(mesg);
        showAlert(mesg);
      } else {
        amount = amount_input;
      }

      if((funcName === 'allowance' || funcName === 'checkTokenApprove' || funcName === 'tokenApprove') && is_operatorAddr_empty){
        operatorAddr = '0x7b8e3d6f83Ed2985585635E0274Fe3C7F068f734';
        mesg = 'operator is found empty. Using default value: '+ operatorAddr;
        console.warn(mesg);
        showAlert(mesg);
      } else {
        operatorAddr = operatorAddr_input;
      }

      console.log(`----==isGoodCtrtAddr: ${isGoodCtrtAddr}, tokenSymbol: ${tokenSymbol}, ctrtAddr: ${ctrtAddr}, \nisGoodAssetbook: ${isGoodAssetbook}, assetbookAddr: ${assetbookAddr}, operatorAddr: ${operatorAddr}, tokenId: ${tokenId}, ownerIndex: ${ownerIndex} startIndex: ${startIndex}, amount: ${amount}`);
      return [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount];
    }



    $('#getAssetbookDetails').on('click',  async function (e) {
      console.log('inside getAssetbookDetails function... \ne.target:', e.target);

      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('getAssetbookDetails');
      //      console.log('result', result);
      if(!isGoodCtrtAddr || isEmpty(ctrtAddr)) return;

      const url = BcApiBase+`tokenHCAT/getAssetbookDetails/${ctrtAddr}`;
      // http://localhost:3030/Contracts/getAssetbookDetails/
      const response = await fetch(url);
      const json = await response.json();
      console.log('after calling API');

      const { endorserCount, checkCustomerService, isAblePlatformOverride, calculateVotes, assetCindex, lastLoginTime,antiPlatformOverrideDaysDefault, antiPlatformOverrideDays,assetOwner_flag, HeliumContract_flag, endorsers_flag, checkAssetOwner } = json;

      const getAssetbookDetails = json['getAssetbookDetails'];
      console.log('getAssetbookDetails:', getAssetbookDetails);
      const tokenIdM = getAssetbookDetails['0'];
      const siteSizeInKW = getAssetbookDetails['1'];
      const maxTotalSupply = getAssetbookDetails['2'];
      const totalSupply = getAssetbookDetails['3'];
      const initialAssetPricing = getAssetbookDetails['4'];
      const pricingCurrency =  json['pricingCurrency'];
      const IRR20yrx100 = getAssetbookDetails['6'];
      const name = json['name'];
      const symbol = json['symbol'];
      const tokenURI = json['tokenURI'];
      const ownerCindex = json['ownerCindex'];
      const TimeOfDeployment = json['TimeOfDeployment'];

      document.getElementById("tokenIdM").innerText = tokenIdM;
      document.getElementById("siteSizeInKW").innerText = siteSizeInKW;
      document.getElementById("maxTotalSupply").innerText = maxTotalSupply;
      document.getElementById("totalSupply").innerText = totalSupply;
      document.getElementById("initialAssetPricing").innerText = initialAssetPricing;
      document.getElementById("pricingCurrency").innerText = pricingCurrency;

      document.getElementById("IRR20yrx100").innerText = parseInt(IRR20yrx100)/100;
      document.getElementById("name").innerText = name;
      document.getElementById("symbolM").innerText = symbol;
      document.getElementById("tokenURI").innerText = tokenURI;
      document.getElementById("ownerCindexM").innerText = ownerCindex;
      document.getElementById("TimeOfDeploymentM").innerText = TimeOfDeployment;

      //location.reload();
    });

    $('#idToAsset').on('click',  async function (e) {
      console.log('inside idToAsset function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('idToAsset');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/idToAsset`;
      // http://localhost:3030/Contracts/tokenHCAT/idToAsset/
      const data = {ctrtAddr, tokenId };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("idToAssetM").innerText = jsonObj['idToAsset'];
    });



    $('#getOwnersByOwnerIndex').on('click',  async function (e) {
      console.log('inside getOwnersByOwnerIndex function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('getOwnersByOwnerIndex');
      console.log(`startIndex: ${startIndex}, amount: ${amount}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;
      if((startIndex > 0 && amount > 0) || (startIndex === 0 && amount === 0)){
        const url = BcApiBase+`tokenHCAT/getOwnersByOwnerIndex`;
        // http://localhost:3030/Contracts/tokenHCAT/getOwnersByOwnerIndex/
        const data = {ctrtAddr, startIndex, amount };
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('Error:', error));
        const jsonObj = await response.json();
        console.log('jsonObj', jsonObj);
        //document.getElementById("getOwnersByOwnerIndexM").innerText = jsonObj['getOwnersByOwnerIndex'];
        const arrayData = jsonObj['getOwnersByOwnerIndex'];
        console.log('arrayData:', arrayData);

        const tbody = document.getElementById('tbodyOwners');
        let tbodyContent = '';
        arrayData.forEach((item,idx) => {
          console.log(`cur= ${item}, idx= ${idx}`);
          const row = '<tr><th scope="row">'+idx+'</th><td>'+item+'</td></tr>';
          tbodyContent = tbodyContent + row;
        });
        tbody.innerHTML = tbodyContent;

      } else {
        mesg = 'either both startIndex and amount are above zeros, or both are zeros';
        console.warn(mesg);
        showAlert(mesg);
      }
    });

  /* idToAsset (get Owner Address from tokenId), isOwnerAdded
idxToOwner   ownerCindex    ownerOf   getOwnersByOwnerIndex
getAccount   balanceOf      getTokenIdByIndex
getAccountIds   allowance    checkTokenApprove    ckStringLength
*/


    $('#getAccountIds').on('click',  async function (e) {
      console.log('inside getAccountIds function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('getAccountIds');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr || !isGoodAssetbook) return;

      const url = BcApiBase+`tokenHCAT/getAccountIds`;
      // http://localhost:3030/Contracts/tokenHCAT/getAccountIds/
      const data = {ctrtAddr, assetbookAddr, startIndex, amount };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);

      const arrayData = jsonObj['getAccountIds'];
      //console.log('arrayData:', arrayData);

      const tbody = document.getElementById('tbodyAccountIds');
      let rowContent = '', row = '', tbodyContent = '';
      if(arrayData.length === 0){

      } else if(arrayData.length === 1){
        tbodyContent = ''+arrayData[0];

      } else if(arrayData.length > 1){
        rowContent = ''+arrayData[0];
        for (let idx = 1; idx < arrayData.length; idx++) {
          //console.log(`cur= ${arrayData[idx]}, idx= ${idx}`);
          rowContent = rowContent +', '+ arrayData[idx];
        }
        row = '<tr></th><td>'+rowContent+'</td></tr>';
        tbodyContent = tbodyContent + row;

      }
      tbody.innerHTML = tbodyContent;
    });


    $('#checkTokenApprove').on('click',  async function (e) {
      console.log('inside checkTokenApprove function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('checkTokenApprove');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/checkTokenApprove`;
      // http://localhost:3030/Contracts/tokenHCAT/checkTokenApprove/
      const data = {ctrtAddr, operatorAddr };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("checkTokenApproveM").innerText = jsonObj['checkTokenApprove'];
    });

    $('#tokenApprove').on('click',  async function (e) {
      console.log('inside tokenApprove function... \ne.target:', e.target);
      const [isGoodCtrtAddr, tokenSymbol, ctrtAddr, isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('tokenApprove');
      console.log(`tokenId: ${tokenId}, ctrtAddr: ${ctrtAddr}`);
      if(!isGoodCtrtAddr) return;

      const url = BcApiBase+`tokenHCAT/tokenApprove`;
      // http://localhost:3030/Contracts/tokenHCAT/tokenApprove/
      const data = {ctrtAddr, operatorAddr, amount };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("tokenApproveM").innerText = jsonObj['tokenApprove'];
    });
  </script>

</body>

</html>
<!--
  http://localhost:3030/ContractExplorer/tokenHCAT

-->