<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="/css/ContractExplorer.css">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="">
  <link rel="stylesheet" href="/css/ctrtInterfaceStyles.css">
  <title>HeliumCryptic Smart Contract Explorer</title>
</head>

<body>
  <div class="container" style="max-width: inherit; margin: 15px;">
    <h2>HeliumCryptic Smart Contract Explorer</h2>

    <div class="alert alert-warning alert-dismissible collapse"  id="alertInputs" role="alert">
      <button type="button" class="close" data-dismiss="alert">x</button>
      <strong>Success! </strong> Product have added to your wishlist.
    </div>

    <div class="" id="mesgDiv" style="margin: 15px;">
      <div class="card card-body d-none" id="mesg" style="background-color: #ffea00;"></div>
    </div>

    <div class="row">
      <div class="col">
        <h5><%= contractType %> Contract:</h5>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either ID Number or Email or Assetbook contract address!">
            <div class="input-group-prepend">
              <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Identity Number</span>
            </div>
            <input type="text" class="form-control" placeholder="owner identity number" aria-label="identityNumber" id="identityNumber" aria-describedby="identityNumber">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either ID Number or Email or Assetbook contract address!">
          <div class="input-group-prepend">
            <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Email</span>
          </div>
          <input type="text" class="form-control" placeholder="owner email" aria-label="email" id="email" aria-describedby="email">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Must enter either ID Number or Email or Assetbook contract address!">
          <div class="input-group-prepend">
            <span class="input-group-text" id="" style="color: rgb(255, 255, 255); background-color: rgb(50, 118, 177); border-color: rgb(40, 94, 142);">Owner Assetbook Address</span>
          </div>
          <input type="text" class="form-control" placeholder="owner assetbook address" aria-label="assetbookAddr" id="assetbookAddr" aria-describedby="assetbookAddr">
        </div>
        <button type="button" id="getAssetbookDetails" class="btn btn-primary">Get Assetbook Details</button>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />


        <!-- -------- endorser check --------------- -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="enter endorser index">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Endorser Index</span>
          </div>
          <input type="text" class="form-control" placeholder="Endorser Index" aria-label="endorserIndex" id="endorserIndex" aria-describedby="endorserIndex">
        </div>

        <button type="button" id="endorsers" class="btn btn-primary">Get endorser from endorser index</button>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />

        <!-- --------target address--------------- -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Enter a target contract address!">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Target Address</span>
          </div>
          <input type="text" class="form-control" placeholder="target address" aria-label="targetAddress" id="targetAddress" aria-describedby="targetAddress">
        </div>
        <button type="button" id="checkIsContract" class="btn btn-primary">checkIsContract ... check if the entered address has a contract deployed</button>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />


        <!-- -------- getAsset  ---------------------------- -->
        <!-- -------- assetIndexToAddr check --------------- -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="enter assetIndex index">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">AssetIndex</span>
          </div>
          <input type="text" class="form-control" placeholder="assetIndex" aria-label="assetIndex" id="assetIndex" aria-describedby="assetindex">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Enter a asset token address!">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">TokenAddress</span>
          </div>
          <input type="text" class="form-control" placeholder="tokenAddress" aria-label="tokenAddress" id="tokenAddress" aria-describedby="tokenAddress">
        </div>
        
        <button type="button" id="getAsset" class="btn btn-primary">Check asset details from token address</button>
        <hr style="border-top: 5px solid rgba(0,0,0,0.3);" />



        <!-- -------------------------------  -->
        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Enter Amount">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Amount</span>
          </div>
          <input type="text" class="form-control" placeholder="Amount" aria-label="amount" id="amount" aria-describedby="amount">
        </div>

        <div class="input-group mb-3" data-toggle="tooltip" data-placement="top" title="Enter Operator's address">
          <div class="input-group-prepend">
            <span class="input-group-text" id="">Operator Address</span>
          </div>
          <input type="text" class="form-control" placeholder="operator address" aria-label="operator address" id="operatorAddr" aria-describedby="operator">
        </div>


        <div class="btn-toolbar button-wrapper" role="toolbar" aria-label="Toolbar with button groups">

          <button type="button" id="getAccount" class="btn btn-primary">getAccount (Get account details from assetbook address)</button>

          <button type="button" id="getAccountIds" class="btn btn-primary">getAccountIds (Get all the tokenIds inside an account)</button>
          <button type="button" id="allowance" class="btn btn-primary">allowance (Get the allowance amount given from one account to another)</button>
          
          <button type="button" id="checkTokenApprove" class="btn btn-primary">checkTokenApprove (Check if this token Id has been approved)</button>
          <button type="button" id="tokenApprove" class="btn btn-primary">tokenApprove (approve an account as an operator acting as an representitive)</button>

        </div>

      </div>

      <div class="col">
        <h5>Result</h5>
        symbol: <span id="symbolM"></span><br>
        name: <span id="name"></span><br>
        
        <br>
        assetOwner: <span id="assetOwnerM"></span><br>
        endorserCount: <span id="endorserCountM"></span><br>
        lastLoginTime: <span id="lastLoginTimeM"></span><br>
        antiPlatformOverrideDaysDefault: <span id="antiPlatformOverrideDaysDefaultM"></span><br>
        antiPlatformOverrideDays: <span id="antiPlatformOverrideDaysM"></span><br>
        assetOwner_flag: <span id="assetOwner_flagM"></span><br>
        HeliumContract_flag: <span id="HeliumContract_flagM"></span><br>
        endorsers_flag: <span id="endorsers_flagM"></span><br>
        checkAssetOwner: <span id="checkAssetOwnerM"></span><br>
        checkCustomerService: <span id="checkCustomerServiceM"></span><br>
        isAblePlatformOverride: <span id="isAblePlatformOverrideM"></span><br>
        endorserAddr: <span id="endorserAddrM"></span><br>
        isContract: <span id="isContractM"></span><br>

        assetIndex_: <span id="assetIndex_"></span><br>
        assetAddr_: <span id="assetAddr_"></span><br>
        balance: <span id="balance"></span><br>
        symbolStr: <span id="symbolStr"></span><br>

        assetCindex: <span id="assetCindexM"></span><br>
        calculateVotes: <span id="calculateVotesM"></span><br>

        error message: <span id="errorMessageM"></span><br>
      </div>
    </div>
  </div>
  <!-- Optional JavaScript

  -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <!--
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  -->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

  <script>
    // http://localhost:3030/ContractExplorer/assetbook
    // $(document).ready(function() {
    //   $("#alertInputs").hide();
    // });
    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    });

    const BcApiBase = "<%= process.env['SERVER_PROTOCOL'] + '://' + process.env['SERVER_HOST'] + ':' + process.env['SERVER_PORT'] + '/Contracts/' %>";
    //const BcApiBase = 'http://${SERVER_HOST}:${SERVER_PORT}/Contracts/';
    const contractType = 'assetbook';
    console.log('BcApiBase:', BcApiBase, ', contractType:', contractType);

    const isEmpty = value => 
      value === undefined ||
      value === null ||
      (typeof value === 'object' && Object.keys(value).length === 0) ||
      (typeof value === 'string' && value.trim().length === 0);
    
    
    const showMessage = (messageTxt) => {
      let mesgFinal = '';
      if(messageTxt.length > 0) {
        if(messageTxt.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgFinal = messageTxt.slice(2);
        } else {
          mesgFinal = messageTxt;
          console.log('>> not removing first two char');
        }
        console.log('mesgFinal:', mesgFinal);

        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").removeClass('d-none');
      } else {
        document.getElementById("mesg").innerText = mesgFinal;
        $("#mesg").addClass('d-none');
      }
      document.getElementById("errorMessageM").innerText = mesgFinal;
      
    }

    const addrZero = "0x0000000000000000000000000000000000000000";

    const checkAssetbook = async(identityNumber_input, email_input, assetbookAddr_input) => {
      let mesg = '', mesgAssetbook = '';
      const is_identityNumber_empty = isEmpty(identityNumber_input);
      const is_email_empty = isEmpty(email_input);
      const is_assetbookAddr_empty = isEmpty(assetbookAddr_input);
      const has0x = assetbookAddr_input.substring(0, 2) === '0x';

      console.log(`is_assetbookAddr_empty: ${is_assetbookAddr_empty}, is_identityNumber_empty: ${is_identityNumber_empty}, is_email_empty: ${is_email_empty} \n assetbookAddr_input.length: ${assetbookAddr_input.length}, does assetbookAddr_input have 0x: ${has0x}`);

      if(!is_assetbookAddr_empty){
        if(assetbookAddr_input.length === 42){
          if(has0x){
            isGoodAssetbook = true;
            assetbookAddr = assetbookAddr_input;
            console.log(`assetbookAddr has been entered correctly: assetbookAddr = ${assetbookAddr}`);
          } else {
            mesg += ', Assetbook contract address should start with 0x';
          }
        } else {
          mesg += ', tokenSymbol should have length of 42';
        }
      } else if(!is_identityNumber_empty){
        const url = BcApiBase+`getAssetbookFromIdentityNumber`;
        console.log('about to get assetbook ... url:', url);
        const data = {identityNumber: identityNumber_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));

        const json = await response.json();
        console.log('json', json);
        ({isGoodAssetbook, assetbookX, resultMesg} = json);
        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          identityNumber = identityNumber_input;
        } else {
          mesg += ', failed at getting assetbookAddr from the identity number: '+identityNumber_input;
        }

      } else if(!is_email_empty){
        const url = BcApiBase+`getAssetbookFromEmail`;
        console.log('about to get assetbook ... url:', url);
        const data = {email: email_input};
        const options = {
          method: 'POST', // or 'PUT'
          body: JSON.stringify(data), // data can be `string` or {object}!
          headers:{'Content-Type': 'application/json'}
        };
        const response = await fetch(url, options).catch(error => console.error('[Error]:', error));
        const json = await response.json();
        console.log('json', json);
        ({isGoodAssetbook, assetbookX, resultMesg} = json);
        console.log(`----------==isGoodAssetbook: ${isGoodAssetbook}, assetbookX: ${assetbookX}, \nresultMesg: ${resultMesg}`);
        if(isGoodAssetbook){
          assetbookAddr = assetbookX;
          email = email_input;
        } else {
          mesg += ', failed at getting assetbookAddr from the identity number: '+email_input;
        }

      } else {
        mesg += ', At least one of assetbookAddr, identityNumber, or email should be valid';
        //console.warn(mesg);

        const isGivingDefault = 1;
        if(isGivingDefault === 1) {
          assetbookAddr = '0x19746ba6B0c85052fB24f4120c9072789d0f7301';
          mesg += ', assetbookAddr is empty. Using default value: assetbookAddr = '+assetbookAddr;
          isGoodAssetbook = true;
        } else {
          mesg += ', assetbookAddr is empty';
        }
      }
      if(mesg.substring(0,2) === ', ') {
          console.log('>> removing first two char');
          mesgAssetbook = mesg.slice(2);
      }
      return [isGoodAssetbook, assetbookAddr, mesgAssetbook];
    }


    const checkInputs = async(funcName) => {
      console.log(`inside checkInputs()...`);
      let tokenSymbol_input, ctrtAddr_input, assetbookAddr_input, operatorAddr_input, tokenId_input, ownerIndex_input, startIndex_input, amount_input, mesg, isGoodAssetbook, assetbookX, resultMesg = '', assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount, identityNumber, email, endorserIndex_input;

      assetbookAddr_input = document.getElementById("assetbookAddr").value;
      identityNumber_input = document.getElementById("identityNumber").value;
      email_input = document.getElementById("email").value;

      endorserIndex_input = document.getElementById("endorserIndex").value;
      targetAddress_input = document.getElementById("targetAddress").value;
      tokenAddress_input = document.getElementById("tokenAddress").value;
      assetIndex_input = document.getElementById("assetIndex").value;
      
      amount_input = document.getElementById("amount").value;
      operatorAddr_input = document.getElementById("operatorAddr").value;

      const is_assetbookAddr_empty = isEmpty(assetbookAddr_input);
      const is_identityNumber_empty = isEmpty(identityNumber_input);
      const is_email_empty = isEmpty(email_input);

      const is_endorserIndex_empty = isEmpty(endorserIndex_input);
      const is_targetAddress_empty = isEmpty(targetAddress_input);
      const is_tokenAddress_empty = isEmpty(tokenAddress_input);
      const is_assetIndex_empty = isEmpty(assetIndex_input);

      const is_amount_empty = isEmpty(amount_input);
      const is_operatorAddr_empty = isEmpty(operatorAddr_input);

      console.log(`\nidentityNumber_input: ${identityNumber_input}, \nemail_input: ${email_input},\nassetbookAddr_input: ${assetbookAddr_input},  ... \nendorserIndex_input: ${endorserIndex_input} targetAddress_input: ${targetAddress_input}, tokenAddress_input: ${tokenAddress_input}, assetIndex_input: ${assetIndex_input}, ... \namount_input: ${amount_input}\noperatorAddr_input: ${operatorAddr_input} `);

      [isGoodAssetbook, assetbookAddr, mesgAssetbook] = await checkAssetbook(identityNumber_input, email_input, assetbookAddr_input);
      console.warn(mesgAssetbook);

      console.log(`----==isGoodAssetbook: ${isGoodAssetbook}, assetbookAddr: ${assetbookAddr}, \nresultMesg: ${resultMesg}`);

      if((funcName === 'getAssetbookDetails')){

      } else if(funcName === 'endorsers'){
        if(is_endorserIndex_empty){
          endorserIndex = 1;
          mesgAssetbook += ', endorserIndex is found empty. Using default value: '+ endorserIndex;
          console.warn(mesgAssetbook);
        } else {
          endorserIndex = endorserIndex_input;
        }
      } else if(funcName === 'checkIsContract'){
        if(is_targetAddress_empty){
          targetAddress = '0x19746ba6B0c85052fB24f4120c9072789d0f7301';
          mesgAssetbook += ', targetAddress is found empty. Using default value: '+ targetAddress;
          console.warn(mesgAssetbook);
        } else {
          targetAddress = targetAddress_input;
        }

      } else if(funcName === 'getAsset'){
        if(is_tokenAddress_empty){
          tokenAddress = '0xA80c0A88e38aa61190A3Ad41bd3907774D291f87';
          mesgAssetbook += ', tokenAddress is found empty. Using default tokenAddress value: '+ tokenAddress;
          console.warn(mesgAssetbook);
        } else {
          tokenAddress = tokenAddress_input;
        }
        if(is_assetIndex_empty){
          assetIndex = 0;
          mesgAssetbook += ', assetIndex is found empty. Using default assetIndex value: '+ assetIndex;
          console.warn(mesgAssetbook);
        } else {
          assetIndex   = assetIndex_input;
        }


      } else {
        console.log('funcName is out of range!');
      }
      if(mesgAssetbook) {showMessage(mesgAssetbook);}

      return [isGoodAssetbook, assetbookAddr, endorserIndex, targetAddress, tokenAddress, assetIndex, amount, operatorAddr];
    }



    $('#getAssetbookDetails').on('click',  async function (e) {
      console.log('inside getAssetbookDetails function... \ne.target:', e.target);

      const [isGoodAssetbook, assetbookAddr, operatorAddr, tokenId, ownerIndex, startIndex, amount] = await checkInputs('getAssetbookDetails');
      //      console.log('result', result);

      const url = BcApiBase+`assetbook/getAssetbookDetails/${assetbookAddr}`;
      // http://localhost:3030/Contracts/getAssetbookDetails/
      const response = await fetch(url);
      const json = await response.json();
      console.log('after calling API ... json: ${json}');

      const { assetOwner, endorserCount, lastLoginTime, antiPlatformOverrideDaysDefault, antiPlatformOverrideDays, assetOwner_flag, HeliumContract_flag, endorsers_flag, checkAssetOwner, checkCustomerService, isAblePlatformOverride, assetCindex, calculateVotes } = json;

      console.log(`assetOwner: ${assetOwner}, \nendorserCount: ${endorserCount}, lastLoginTime: ${lastLoginTime}, antiPlatformOverrideDaysDefault: ${antiPlatformOverrideDaysDefault}, antiPlatformOverrideDays: ${antiPlatformOverrideDays}, assetOwner_flag: ${assetOwner_flag}, HeliumContract_flag: ${HeliumContract_flag}, endorsers_flag: ${endorsers_flag}, checkAssetOwner: ${checkAssetOwner}, checkCustomerService: ${checkCustomerService}, isAblePlatformOverride: ${isAblePlatformOverride}, assetCindex: ${assetCindex}, calculateVotes: ${calculateVotes}`);
      //const name = json['name'];

      document.getElementById("assetOwnerM").innerText = assetOwner;
      document.getElementById("endorserCountM").innerText = endorserCount;
      document.getElementById("lastLoginTimeM").innerText = lastLoginTime;
      document.getElementById("antiPlatformOverrideDaysDefaultM").innerText = antiPlatformOverrideDaysDefault;
      document.getElementById("antiPlatformOverrideDaysM").innerText = antiPlatformOverrideDays;
      document.getElementById("assetOwner_flagM").innerText = assetOwner_flag;
      document.getElementById("HeliumContract_flagM").innerText = HeliumContract_flag;
      document.getElementById("endorsers_flagM").innerText = endorsers_flag;
      document.getElementById("checkAssetOwnerM").innerText = checkAssetOwner;
      document.getElementById("checkCustomerServiceM").innerText = checkCustomerService;
      document.getElementById("isAblePlatformOverrideM").innerText = isAblePlatformOverride;
      document.getElementById("assetCindexM").innerText = assetCindex;
      document.getElementById("calculateVotesM").innerText = calculateVotes;
      //location.reload();
    });

    $('#endorsers').on('click',  async function (e) {
      console.log('inside endorsers function... \ne.target:', e.target);
      const [isGoodAssetbook, assetbookAddr, endorserIndex, targetAddress, tokenAddress, assetIndex, amount, operatorAddr] = await checkInputs('endorsers');

      const url = BcApiBase+`assetbook/endorsers`;
      // http://localhost:3030/Contracts/assetbook/endorsers/
      const data = { assetbookAddr, endorserIndex };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("endorserAddrM").innerText = jsonObj['endorserAddr'];
    });

    $('#checkIsContract').on('click',  async function (e) {
      console.log('inside checkIsContract function... \ne.target:', e.target);
      const [isGoodAssetbook, assetbookAddr, endorserIndex, targetAddress, tokenAddress, assetIndex, amount, operatorAddr] = await checkInputs('checkIsContract');

      const url = BcApiBase+`assetbook/checkIsContract`;
      // http://localhost:3030/Contracts/assetbook/checkIsContract/
      const data = { assetbookAddr, targetAddress };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      document.getElementById("isContractM").innerText = jsonObj['isContract'];
    });
    

    $('#getAsset').on('click',  async function (e) {
      console.log('inside getAsset function... \ne.target:', e.target);
      const [isGoodAssetbook, assetbookAddr, endorserIndex, targetAddress, tokenAddress, assetIndex, amount, operatorAddr] = await checkInputs('getAsset');

      const url = BcApiBase+`assetbook/getAsset`;
      // http://localhost:3030/Contracts/assetbook/getAsset/
      const data = { assetbookAddr, assetIndex, tokenAddress };
      const options = {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{'Content-Type': 'application/json'}
      };
      const response = await fetch(url, options).catch(error => console.error('Error:', error));
      const jsonObj = await response.json();
      console.log('jsonObj', jsonObj);
      const {assetIndex_, assetAddr_, symbol, balance} = jsonObj['assetInfo'];
      const symbolStr = jsonObj.symbolStr.trim();
      console.log(`assetIndex_: ${assetIndex_}, assetAddr_: ${assetAddr_}, symbol: ${symbol}, balance: ${balance}, symbolStr: ${symbolStr}`);

      document.getElementById("assetIndex_").innerText = assetIndex_;
      document.getElementById("assetAddr_").innerText = assetAddr_;
      document.getElementById("balance").innerText = balance;
      document.getElementById("symbolStr").innerText = symbolStr;

    });
  /* idToAsset (get Owner Address from tokenId), isOwnerAdded
idxToOwner   ownerCindex    ownerOf   getOwnersByOwnerIndex
getAccount   balanceOf      getTokenIdByIndex
getAccountIds   allowance    checkTokenApprove    ckStringLength
*/
  </script>

</body>

</html>
<!--
  http://localhost:3030/ContractExplorer/assetbook

-->